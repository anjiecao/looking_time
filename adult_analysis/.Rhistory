) %>%
select(temp_id, first_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(first_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
second_dev_pos_df <- df.processed %>%
filter(trial_type_index == "second_deviant") %>%
select(subject, block_number, trial_type_index, trial_number) %>%
mutate(
temp_id = paste0(subject, block_number),
second_dev_position = trial_number
) %>%
select(temp_id, second_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(second_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
#write_csv(df.processed, here('data/processed_data/processed_RTdata.csv'))
# df.main
View(df.processed)
# complexity doesn't have trial type
df.similarity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="similarity") %>%
select(subject, question_type, rt, responses, stimulus_left, stimulus_right) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus_left, stimulus_right, rating)
#write_csv(df.similarity, here('data/processed_data/processed_similaritydata.csv'))
df.complexity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="complexity") %>%
select(subject, question_type, rt, responses, stimulus) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus, rating)
#write_csv(df.complexity, here('data/processed_data/processed_complexitydata.csv'))
df.demog <- df.raw  %>%
filter(grepl("demog", trial_type)) %>%
select(subject, trial_type, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
demog_question = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(demog_question)  %>%
group_by(subject) %>%
mutate_at(vars(-group_cols()), function(x) {x[!is.na(x)][1]}) %>%
distinct() %>%
select(-responses, -trial_type)
#write_csv(df.demog, here('data/processed_data/processed_demogdata.csv'))
df.attention_check <- df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
group_by(subject) %>%
summarize(
total_question = n(),
correct_question = sum(correct_response),
percent_correct = correct_question / total_question
)
# flat rt participant
flat_rt_sbj <- df.processed %>%
group_by(subject) %>%
summarise(sd = sd(log(rt))) %>%
filter(sd < 0.15) %>%
pull(subject)
# attention check participant
attention_check_sbj <- df.attention_check %>%
filter(percent_correct < 0.8) %>%
pull(subject)
# similarity rating
similarity_sbj <- df.similarity %>%
count(subject, rating) %>%
filter(n > 20 * 0.8) %>%  # twenty trials, 80% identical rating
pull(subject)
#similarity_sbj
complexity_sbj <- df.complexity %>%
count(subject, rating) %>%
filter(n > 20 * 0.8) %>%  # twenty trials, 80% identical rating
pull(subject)
exlude_participant <- unique(c(flat_rt_sbj,
similarity_sbj,
complexity_sbj,
attention_check_sbj))
df.rt_trimmed <- df.processed %>% filter(!(subject %in% exlude_participant))
#df.pref_trimmed <- df.pref %>% filter(!(subject %in% exlude_participant))
df.complexity_trimmed <- df.complexity %>% filter(!(subject %in% exlude_participant))
df.similarity_trimmed <- df.similarity %>% filter(!(subject %in% exlude_participant))
df.demog_trimmmed <- df.demog %>% filter(!(subject %in% exlude_participant))
rt_summary <- df.rt_trimmed %>%
summarise(
median = median(log(rt)),
mad = mad(log(rt)),
upper = median + 3 * mad,
lower = median - 3 * mad)
df.rt_trimmed <- df.rt_trimmed %>%
filter(!(log(rt) > rt_summary$upper | log(rt) < rt_summary$lower))
write_csv(df.rt_trimmed, rt_path)
#write_csv(df.pref_trimmed, here('data/processed_data/trimmed_prefdata.csv'))
write_csv(df.demog_trimmmed, demog_path)
write_csv(df.similarity_trimmed, similarity_path)
write_csv(df.complexity_trimmed, complexity_path)
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
#pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
feedback <- read_csv(here('data/merged_data/sample_1/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
write_csv(feedback, here("data/merged_data/sample_1/feedback.csv"))
View(feedback)
feedback <- read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
write_csv(feedback, here("data/merged_data/sample_1/feedback.csv"))
View(feedback)
feedback <- read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
write_csv(feedback, here("data/merged_data/feedback.csv"))
RT_data %>%
distinct(subject) %>%
count()
# reorder
RT_data$trial_complexity = factor(RT_data$trial_complexity, levels=c('simple', 'complex'))
RT_data$item_type = factor(RT_data$item_type, levels=c('background', 'similar deviant', 'dissimilar deviant'))
demog_data %>%
ggplot(aes(x = as.numeric(age))) +
geom_histogram()
demog_data %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = gender)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = education)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
View(RT_data)
RT_data %>%
# filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
# scale_x_log10()
RT_data %>%
# filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_grid(block_type~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_complexity)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~block_type)
RT_data %>%
filter(trial_complexity == "simple") %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~item_id)
RT_data %>%
filter(trial_complexity == "complex") %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~item_id)
ggplot(RT_data, aes(x=trial_number, y=log(rt), colour=item_type)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .1)) +
stat_summary(geom = "line", alpha = .5) +
geom_smooth(method = "lm",
formula = y ~ log(x)) +
facet_wrap(~block_type)
knitr::opts_chunk$set(echo = TRUE)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
#pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data  %>%
filter(trial_number == 1) %>%
ggplot(
aes(x=exposure_type, y=log(rt), colour=exposure_type)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
#facet_wrap(~trial_complexity)+
ylab("log RT (ms) at the first trial") +
xlab("exposure type")
exposure_comparison_df <- RT_data  %>%
mutate(
exposure_trial_comparison = case_when(
trial_number == 2 & exposure_type == "forced_long" ~ "forced_long_second",
trial_number == 2 & exposure_type == "forced_short" ~ "forced_short_second",
trial_number == 1 & exposure_type == "self_paced" ~ "self_paced_first",
TRUE ~ "irrelevant"
)
) %>%
filter(exposure_trial_comparison != "irrelevant")
exposure_comparison_df %>%
ggplot(
aes(x = exposure_trial_comparison,
y = log(looking_time), colour=item_type)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_hline(yintercept = exposure_comparison_df %>% filter(exposure_trial_comparison == "self_paced_first") %>% summarise(mean_lt = mean(log(looking_time))) %>% select(mean_lt) %>%  pull()) +
langcog::scale_color_solarized(name = "Item Type") +
#facet_wrap(~half)+
#theme(legend.position = "bottom") +
ylab("log looking time (ms) at the second trial for forced block") +
xlab("exposure type") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data <- RT_data %>%
mutate(looking_time = case_when(
exposure_type == "forced_short" & trial_number == 1 ~ 500,
exposure_type == "forced_long" & trial_number == 1 ~ 15000,
TRUE ~ 500 + rt
))
feedback <- read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
feedback %>% kableExtra::kable()
RT_data %>%
distinct(subject) %>%
count()
# reorder
RT_data$trial_complexity = factor(RT_data$trial_complexity, levels=c('simple', 'complex'))
RT_data$item_type = factor(RT_data$item_type, levels=c('background', 'similar deviant', 'dissimilar deviant'))
demog_data %>%
ggplot(aes(x = as.numeric(age))) +
geom_histogram()
demog_data %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = gender)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = education)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_grid(block_type~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_complexity)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~block_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~exposure_type)
RT_data %>%
filter(trial_complexity == "simple") %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~item_id)
exposure_comparison_df <- RT_data  %>%
mutate(
exposure_trial_comparison = case_when(
trial_number == 2 & exposure_type == "forced_long" ~ "forced_long_second",
trial_number == 2 & exposure_type == "forced_short" ~ "forced_short_second",
trial_number == 1 & exposure_type == "self_paced" ~ "self_paced_first",
TRUE ~ "irrelevant"
)
) %>%
filter(exposure_trial_comparison != "irrelevant")
exposure_comparison_df %>%
ggplot(
aes(x = exposure_trial_comparison,
y = log(looking_time), colour=item_type)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_hline(yintercept = exposure_comparison_df %>% filter(exposure_trial_comparison == "self_paced_first") %>% summarise(mean_lt = mean(log(looking_time))) %>% select(mean_lt) %>%  pull()) +
langcog::scale_color_solarized(name = "Item Type") +
#facet_wrap(~half)+
#theme(legend.position = "bottom") +
ylab("log looking time (ms) at the second trial for forced block") +
xlab("exposure type") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
exposure_comparison_df %>%
ggplot(
aes(x = block_number,
y = log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
langcog::scale_color_solarized(name = "Item Type") +
facet_wrap(~item_type)+
#theme(legend.position = "bottom") +
ylab("log looking time (ms) at the second trial for forced block") +
xlab("exposure type") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
exposure_comparison_df %>%
filter(exposure_trial_comparison != "self_paced_first") %>%
ggplot(
aes(x = block_number,
y = log(looking_time), colour=exposure_type)) +
geom_smooth(se = FALSE)+
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
langcog::scale_color_solarized(name = "Item Type") +
facet_grid(trial_complexity~item_type)+
#theme(legend.position = "bottom") +
ylab("log looking time (ms) at the second trial for forced block") +
xlab("exposure type") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
RT_data %>%
filter(trial_type == "background") %>%
filter(trial_number %in% c(1, 2)) %>%
ggplot(aes(x = trial_number, y = looking_time, colour = exposure_type)) +
stat_summary(fun.data = "mean_cl_boot", geom = "line", position = position_dodge(width = .1))  +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", position = position_dodge(width = .1)) +
langcog::scale_color_solarized(name = "Exposure Type") +
scale_x_continuous(breaks = seq(1,2,1)) +
facet_wrap(~trial_complexity)+
theme_classic() +
xlab("Trial Number") +
ylab("Looking time (ms)") +
labs(title = "Looking time at critical trials (Second trial background only)")
RT_data %>%
filter((trial_number == 1 & item_type == "background") |
trial_number == 2 & item_type == "dissimilar deviant") %>%
ggplot(aes(x = trial_number, y = looking_time, colour = exposure_type)) +
stat_summary(fun.data = "mean_cl_boot", geom = "line", position = position_dodge(width = .1))  +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", position = position_dodge(width = .1)) +
langcog::scale_color_solarized(name = "Exposure Type") +
scale_x_continuous(breaks = seq(1,2,1)) +
facet_wrap(~trial_complexity)+
theme_classic() +
xlab("Trial Number") +
ylab("Looking time (ms)") +
labs(title = "Looking time at critical trials (Second trial deviants only)")
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = exposure_type, y = looking_time, color = item_type)) +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", position = position_dodge(width = .1)) +
langcog::scale_color_solarized(name = "Item Type") +
theme_classic() +
labs(title = "Looking time at the second trial")
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = exposure_type, y = looking_time, color = item_type)) +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", position = position_dodge(width = .1)) +
langcog::scale_color_solarized(name = "Item Type") +
theme_classic() +
labs(title = "Looking time at the second trial") +
facet_wrap(~forced_exposure_time)
View(RT_data)
View(RT_data)
RT_data %>%
filter(trial_number == 2) %>%
select(block_number, item_type, looking_time)
RT_data %>%
filter(trial_number == 2) %>%
select(block_number, item_type, looking_time, forced_exposure_time)
RT_data %>%
filter(trial_number == 2) %>%
select(item_type, looking_time, forced_exposure_time)
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = exposure_type, y = looking_time, color = item_type)) +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", position = position_dodge(width = .1)) +
langcog::scale_color_solarized(name = "Item Type") +
theme_classic() +
labs(title = "Looking time at the second trial")
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = looking_time, color = item_type))
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = looking_time, color = item_type)) +
geom_point() +
geom_smooth()
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = looking_time, color = item_type)) +
geom_point() +
geom_smooth(method = "lm")
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = log(looking_time), color = item_type)) +
geom_point() +
geom_smooth(method = "lm")
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = log(looking_time), color = item_type)) +
geom_point() +
geom_smooth(method = "lm")+
facet_wrap(~block)
RT_data %>%
filter(trial_number == 2) %>%
ggplot(aes(x = forced_exposure_time, y = log(looking_time), color = item_type)) +
geom_point() +
geom_smooth(method = "lm")+
facet_wrap(~block_number)
