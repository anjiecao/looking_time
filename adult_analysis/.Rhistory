labs(title ="randomly sampling 9 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
#pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram()
RT_data %>%
# filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
# scale_x_log10()
source('~/Desktop/projects/looking_time/adult_analysis/00_merged_and_deidentified.R', echo=TRUE)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
d_path <- here("data/merged_data/merged_data.csv")
# d_path <- here("data/raw_data/testSS1612925903745.csv")
df.raw <- read_csv(d_path)
View(df.raw)
TEST_TRIAL <- c("pref_reveal", "trial")
# do we want to go w/ the data wrangling route or the jspsych route?
df.processed <- df.raw %>%
filter(stimulus_type == "trial") %>%
select(subject, rt,
block_number, block_type, stimulus_displayed,
block_deviant, block_background) %>%
group_by(subject, block_number) %>%
mutate(
trial_number = row_number()) %>%
mutate(
trial_type = case_when(
stimulus_displayed == block_deviant ~ "deviant",
TRUE ~ "background"
),
trial_complexity = case_when(
grepl("simple", stimulus_displayed) ~ "simple",
grepl("complex", stimulus_displayed) ~ "complex"
)
) %>%
mutate(trial_complexity = factor(trial_complexity, levels = c("simple", "complex"))) %>%
mutate(block_similarity = case_when(
grepl("_similar", block_type) ~ "similar",
grepl("_dissimilar", block_type) ~ "dissimilar"
)
) %>%
mutate(item_type = case_when(
trial_type == 'background' ~ trial_type,
trial_type == 'deviant' ~ paste(block_similarity, 'deviant')
)
) %>%
mutate(item_type = factor(
item_type,
levels = c("background",
"similar deviant",
"dissimilar deviant")
)
)  %>%
mutate(item_id =
str_match(stimulus_displayed, "spore_stims/\\s*(.*?)..\\s*.gif")[,2]
)  %>%
select(subject, block_number, block_type, trial_number, item_type, trial_type, trial_complexity, item_id, rt) %>%
transform(rt = as.numeric(rt)) %>%
mutate(half = case_when(
block_number <= max(block_number)/2 ~ 'first half' ,
block_number > max(block_number)/2 ~ 'second half',
)
)
################# Calculate number of deviants per block #################
temp_block_number <- df.processed %>%
group_by(subject, block_number) %>%
summarise(
block_length = n()
) %>%
mutate(
temp_id = paste0(subject, block_number)
) %>%
ungroup() %>%
select(subject, block_number, temp_id, block_length)
# calculate background trial number and do substraction to know the # of deviants
temp_background_number <- df.processed %>%
group_by(subject, trial_type, block_number) %>%
summarise(
trial_type_number = n()
) %>%
filter(trial_type == "background") %>%
mutate(
temp_id = paste0(subject, block_number)
) %>%
rename(background_number = trial_type_number) %>%
ungroup() %>%
select(temp_id, background_number)
temp_deviant <- left_join(temp_block_number, temp_background_number,
by = "temp_id") %>%
mutate(
block_deviant_number = block_length - background_number
) %>%
ungroup() %>%
select(temp_id, block_deviant_number)
df.processed <- df.processed %>%
mutate(temp_id = paste0(subject, block_number)) %>%
left_join(temp_deviant, by = "temp_id") %>%
select(-temp_id)
################# Add first_deviant second_deviant #################
temp_deviant_order <- df.processed %>%
filter(trial_type == "deviant") %>%
select(subject, block_number, trial_number, trial_type) %>%
group_by(subject, block_number) %>%
mutate(
index = row_number(),
trial_type_index = case_when(
index == 1 ~ "first_deviant",
index == 2 ~ "second_deviant"
),
temp_id = paste0(subject, block_number, trial_number)
) %>%
ungroup() %>%
select(temp_id, trial_type_index)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number, trial_number)
) %>%
left_join(temp_deviant_order, by = "temp_id") %>%
mutate(
trial_type_index = if_else(is.na(trial_type_index),
"background",
trial_type_index)
) %>%
select(- temp_id)
################# Add first_deviant second_deviant position #################
first_dev_pos_df <- df.processed %>%
filter(trial_type_index == "first_deviant") %>%
select(subject, block_number, trial_type_index, trial_number) %>%
mutate(
temp_id = paste0(subject, block_number),
first_dev_position = trial_number
) %>%
select(temp_id, first_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(first_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
second_dev_pos_df <- df.processed %>%
filter(trial_type_index == "second_deviant") %>%
select(subject, block_number, trial_type_index, trial_number) %>%
mutate(
temp_id = paste0(subject, block_number),
second_dev_position = trial_number
) %>%
select(temp_id, second_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(second_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
write_csv(df.processed, here('data/processed_data/processed_RTdata.csv'))
# df.main
# complexity doesn't have trial type
df.similarity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="similarity") %>%
select(subject, question_type, rt, responses, stimulus_left, stimulus_right) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus_left, stimulus_right, rating)
write_csv(df.similarity, here('data/processed_data/processed_similaritydata.csv'))
df.complexity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="complexity") %>%
select(subject, question_type, rt, responses, stimulus) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus, rating)
write_csv(df.complexity, here('data/processed_data/processed_complexitydata.csv'))
df.demog <- df.raw  %>%
filter(grepl("demog", trial_type)) %>%
select(subject, trial_type, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
demog_question = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(demog_question)  %>%
group_by(subject) %>%
mutate_at(vars(-group_cols()), function(x) {x[!is.na(x)][1]}) %>%
distinct() %>%
select(-responses, -trial_type)
write_csv(df.demog, here('data/processed_data/processed_demogdata.csv'))
df.attention_check <- df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
group_by(subject) %>%
summarize(
total_question = n(),
correct_question = sum(correct_response),
percent_correct = correct_question / total_question
)
df.demog <- df.raw  %>%
filter(grepl("demog", trial_type)) %>%
select(subject, trial_type, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
demog_question = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(demog_question)  %>%
group_by(subject) %>%
mutate_at(vars(-group_cols()), function(x) {x[!is.na(x)][1]}) %>%
distinct() %>%
select(-responses, -trial_type)
write_csv(df.demog, here('data/processed_data/processed_demogdata.csv'))
RT_data <- read_csv(here('data/sample_1/processed_data/trimmed_RTdata.csv'))
RT_data <- read_csv(here('data/processed_data/sample_1/trimmed_RTdata.csv'))
View(RT_data)
merged_data <- read_csv(here('data/merged_data/sample_1/merged_data.csv'))
View(merged_data)
merged_data <- read_csv(here('data/merged_data/sample_1/merged_data.csv')) %>%
filter(stimulus_type == "feedback")
View(merged_data)
merged_data <- read_csv(here('data/merged_data/sample_1/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response)
merged_data <- read_csv(here('data/merged_data/sample_1/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback)
View(merged_data)
feedback <- read_csv(here('data/merged_data/sample_1/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
write_csv(feedback, here("data/merged_data/sample_1/feedback.csv"))
source('~/Desktop/projects/looking_time/adult_analysis/00_merged_and_deidentified.R', echo=TRUE)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
d_path <- here("data/merged_data/merged_data.csv")
# d_path <- here("data/raw_data/testSS1612925903745.csv")
df.raw <- read_csv(d_path)
TEST_TRIAL <- c("pref_reveal", "trial")
# do we want to go w/ the data wrangling route or the jspsych route?
df.processed <- df.raw %>%
filter(stimulus_type == "trial") %>%
select(subject, rt,
block_number, block_type, stimulus_displayed,
block_deviant, block_background) %>%
group_by(subject, block_number) %>%
mutate(
trial_number = row_number()) %>%
mutate(
trial_type = case_when(
stimulus_displayed == block_deviant ~ "deviant",
TRUE ~ "background"
),
trial_complexity = case_when(
grepl("simple", stimulus_displayed) ~ "simple",
grepl("complex", stimulus_displayed) ~ "complex"
)
) %>%
mutate(trial_complexity = factor(trial_complexity, levels = c("simple", "complex"))) %>%
mutate(block_similarity = case_when(
grepl("_similar", block_type) ~ "similar",
grepl("_dissimilar", block_type) ~ "dissimilar"
)
) %>%
mutate(item_type = case_when(
trial_type == 'background' ~ trial_type,
trial_type == 'deviant' ~ paste(block_similarity, 'deviant')
)
) %>%
mutate(item_type = factor(
item_type,
levels = c("background",
"similar deviant",
"dissimilar deviant")
)
)  %>%
mutate(item_id =
str_match(stimulus_displayed, "spore_stims/\\s*(.*?)..\\s*.gif")[,2]
)  %>%
select(subject, block_number, block_type, trial_number, item_type, trial_type, trial_complexity, item_id, rt, exposure_type) %>%
transform(rt = as.numeric(rt)) %>%
mutate(half = case_when(
block_number <= max(block_number)/2 ~ 'first half' ,
block_number > max(block_number)/2 ~ 'second half',
)
)
TEST_TRIAL <- c("pref_reveal", "trial")
# do we want to go w/ the data wrangling route or the jspsych route?
df.processed <- df.raw %>%
filter(stimulus_type == "trial") %>%
select(subject, rt,
block_number, block_type, stimulus_displayed,
block_deviant, block_background,
exposure_type) %>%
group_by(subject, block_number) %>%
mutate(
trial_number = row_number()) %>%
mutate(
trial_type = case_when(
stimulus_displayed == block_deviant ~ "deviant",
TRUE ~ "background"
),
trial_complexity = case_when(
grepl("simple", stimulus_displayed) ~ "simple",
grepl("complex", stimulus_displayed) ~ "complex"
)
) %>%
mutate(trial_complexity = factor(trial_complexity, levels = c("simple", "complex"))) %>%
mutate(block_similarity = case_when(
grepl("_similar", block_type) ~ "similar",
grepl("_dissimilar", block_type) ~ "dissimilar"
)
) %>%
mutate(item_type = case_when(
trial_type == 'background' ~ trial_type,
trial_type == 'deviant' ~ paste(block_similarity, 'deviant')
)
) %>%
mutate(item_type = factor(
item_type,
levels = c("background",
"similar deviant",
"dissimilar deviant")
)
)  %>%
mutate(item_id =
str_match(stimulus_displayed, "spore_stims/\\s*(.*?)..\\s*.gif")[,2]
)  %>%
select(subject, block_number, block_type, trial_number, item_type, trial_type, trial_complexity, item_id, rt, exposure_type) %>%
transform(rt = as.numeric(rt)) %>%
mutate(half = case_when(
block_number <= max(block_number)/2 ~ 'first half' ,
block_number > max(block_number)/2 ~ 'second half',
)
)
################# Calculate number of deviants per block #################
temp_block_number <- df.processed %>%
group_by(subject, block_number) %>%
summarise(
block_length = n()
) %>%
mutate(
temp_id = paste0(subject, block_number)
) %>%
ungroup() %>%
select(subject, block_number, temp_id, block_length)
# calculate background trial number and do substraction to know the # of deviants
temp_background_number <- df.processed %>%
group_by(subject, trial_type, block_number) %>%
summarise(
trial_type_number = n()
) %>%
filter(trial_type == "background") %>%
mutate(
temp_id = paste0(subject, block_number)
) %>%
rename(background_number = trial_type_number) %>%
ungroup() %>%
select(temp_id, background_number)
temp_deviant <- left_join(temp_block_number, temp_background_number,
by = "temp_id") %>%
mutate(
block_deviant_number = block_length - background_number
) %>%
ungroup() %>%
select(temp_id, block_deviant_number)
df.processed <- df.processed %>%
mutate(temp_id = paste0(subject, block_number)) %>%
left_join(temp_deviant, by = "temp_id") %>%
select(-temp_id)
################# Add first_deviant second_deviant #################
temp_deviant_order <- df.processed %>%
filter(trial_type == "deviant") %>%
select(subject, block_number, trial_number, trial_type) %>%
group_by(subject, block_number) %>%
mutate(
index = row_number(),
trial_type_index = case_when(
index == 1 ~ "first_deviant",
index == 2 ~ "second_deviant"
),
temp_id = paste0(subject, block_number, trial_number)
) %>%
ungroup() %>%
select(temp_id, trial_type_index)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number, trial_number)
) %>%
left_join(temp_deviant_order, by = "temp_id") %>%
mutate(
trial_type_index = if_else(is.na(trial_type_index),
"background",
trial_type_index)
) %>%
select(- temp_id)
################# Add first_deviant second_deviant position #################
first_dev_pos_df <- df.processed %>%
filter(trial_type_index == "first_deviant") %>%
select(subject, block_number, trial_type_index, trial_number) %>%
mutate(
temp_id = paste0(subject, block_number),
first_dev_position = trial_number
) %>%
select(temp_id, first_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(first_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
second_dev_pos_df <- df.processed %>%
filter(trial_type_index == "second_deviant") %>%
select(subject, block_number, trial_type_index, trial_number) %>%
mutate(
temp_id = paste0(subject, block_number),
second_dev_position = trial_number
) %>%
select(temp_id, second_dev_position)
df.processed <- df.processed %>%
mutate(
temp_id = paste0(subject, block_number)) %>%
left_join(second_dev_pos_df, by = "temp_id") %>%
select(-temp_id)
write_csv(df.processed, here('data/processed_data/processed_RTdata.csv'))
# df.main
View(df.processed)
df.processed %>% group_by(block_type, exposure_type)
df.processed %>% group_by(block_type, exposure_type) %>% count()
df.processed %>% group_by(block_type, exposure_type) %>% distinct() %>% count()
df.processed %>% group_by(block_type, exposure_type, block_number) %>% distinct() %>% count()
df.processed %>% group_by(block_type, exposure_type, block_number) %>% count()
