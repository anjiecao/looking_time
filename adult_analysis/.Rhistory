#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates
View(all_updates)
all_updates %>% summarise(sum = sum(posterior))
all_updates %>% group_by(feature_index, update_number) %>% summarise(sum = sum(posterior))
all_updates %>% group_by(feature_index, update_number) %>% summarise(sum = sum(posterior)) %>% select(update_number, sum)
all_updates %>% group_by(feature_index, update_number) %>% summarise(sum = sum(posterior)) %>% View()
length(grid_theta)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.1, 1, 0.2)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>% group_by(update_number,
feature_index) %>%
summarise(sum = sum(posterior))
length(grid_epsilon)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.1, 1, 0.2)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>% group_by(update_number,
feature_index) %>%
summarise(sum = sum(posterior))
y_1
y_2
y_3
y_1
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index) +
labs(title = "theta + epislon")
all_updates_theta %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index) +
labs(title = "theta only")
y_1
y_2
y_3
all_updates_kl <- get_kl_for_creature(all_updates)
all_updates_kl %>%
group_by(update_step) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature)) +
geom_line() #+
#facet_wrap(~feature_index)
all_updates_kl %>%
ggplot(aes(x = update_step,
y = kl)) +
geom_line() +
facet_wrap(~feature_index)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
all_observaion <- do.call(rbind, obs)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
library(tidyverse)
library(matrixStats)
library(here)
source(here("adult_modeling/scripts/grid_approximation.R"))
source(here("adult_modeling/scripts/noisy_update.R"))
source(here("adult_modeling/scripts/get_stimuli_and_observation.R"))
library(tidyverse)
library(matrixStats)
library(here)
source(here("adult_modeling/scripts/grid_approximation.R"))
source(here("adult_modeling/scripts/noisy_update.R"))
source(here("adult_modeling/scripts/get_stimuli_and_observations.R"))
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
obs<-generate_noisy_observations(
block = t,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 5,
epsilon = 0.02)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
all_observaion <- do.call(rbind, obs)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
#grid_theta <- seq(0.01, 0.99, 0.05)
#grid_epsilon <- seq(0.01, 0.99, 0.05)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
all_observaion <- do.call(rbind, obs)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
View(all_updates)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.1, 1, 0.2)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>% group_by(update_number,
feature_index) %>%
summarise(sum = sum(posterior))
View(all_updates)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.1, 1, 0.2)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>% group_by(update_number,
feature_index) %>%
summarise(sum = sum(posterior))
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>% group_by(update_number,
feature_index) %>%
summarise(sum = sum(posterior))
View(all_updates)
three_observations
all_observaion
three_observations
make_individual_creature <- function(creature_theta){
sapply(creature_theta, function(x){rbernoulli(p = x, n = 1)})
}
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/get_stimuli_and_observations.R', echo=TRUE)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/get_stimuli_and_observations.R', echo=TRUE)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/get_stimuli_and_observations.R', echo=TRUE)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/get_stimuli_and_observations.R', echo=TRUE)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
obs<-generate_noisy_observations(
block = t,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 5,
epsilon = 0.02)
#grid_theta <- seq(0.01, 0.99, 0.05)
#grid_epsilon <- seq(0.01, 0.99, 0.05)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
all_observaion <- do.call(rbind, obs)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
View(all_updates)
#grid_theta <- seq(0.01, 0.99, 0.05)
#grid_epsilon <- seq(0.01, 0.99, 0.05)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
all_observaion <- do.call(rbind, obs)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates_kl <- get_kl_for_creature(all_updates)
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index) +
labs(title = "theta + epislon")
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index) +
labs(title = "theta + epislon")
all_updates_kl %>%
group_by(update_step) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature)) +
geom_line() #+
#facet_wrap(~feature_index)
all_updates_kl %>%
ggplot(aes(x = update_step,
y = kl)) +
geom_line() +
facet_wrap(~feature_index)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
obs<-generate_noisy_observations(
block = t,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
#grid_theta <- seq(0.01, 0.99, 0.05)
#grid_epsilon <- seq(0.01, 0.99, 0.05)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
all_observaion <- do.call(rbind, obs)
updates = nrow(all_observaion)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = 1, beta_epsilon = 10) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates_kl <- get_kl_for_creature(all_updates)
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index) +
labs(title = "theta + epislon")
all_updates_kl %>%
group_by(update_step) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature)) +
geom_line() #+
#facet_wrap(~feature_index)
all_updates_kl %>%
ggplot(aes(x = update_step,
y = kl)) +
geom_line() +
facet_wrap(~feature_index)
