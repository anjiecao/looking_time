alpha_epsilon,
beta_epsilon
){
# special case this is for when only update based on 1 observation
if(!is.matrix(noisy_creature_observation)){
feature_number = length(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}else{
feature_number = ncol(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[,x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}
}
mike_version_grid_approx <- function(
feature_i,
grid_theta,
grid_epsilon,
observations,
alpha_theta, beta_theta,
alpha_epsilon, beta_epsilon
){
samps <- expand_grid(theta = grid_theta,
epsilon = grid_epsilon)
samps$unnormalized_log_posterior <- mapply(function(x, y)
lp_theta_given_z(z_bar = observations,
theta = x,
epsilon = y,
alpha_theta = alpha_theta,
beta_theta = beta_theta,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon),
samps$theta,
samps$epsilon)
samps$log_posterior = samps$unnormalized_log_posterior - matrixStats::logSumExp(samps$unnormalized_log_posterior)
theta_posterior <- samps %>%
group_by(theta) %>%
summarise(
log_posterior = matrixStats::logSumExp(log_posterior) +
log(1/length(log_posterior))) %>%
mutate(posterior = exp(log_posterior)) %>%
mutate(feature_index = feature_i)
return(theta_posterior)
}
test_creature_background_theta <- c(0.01, 0.01, 0.01, 0.99, 0.99, 0.8)
test_creature_deviant_theta <- c(0.2, 0.8, 0.8, 0.2, 0.2, 0.9)
#test creature
# these will be a block [y_1, y_2, y_3, y_4, z_1, y_5]
y_1 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_2 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_3 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_4 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
z_1 <-  sapply(test_creature_deviant_theta, function(x){rbernoulli(p = x, n = 1)})
#y_5 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
# in each trial collects like 100 times
y_1_noisy_observation <- rbind(noisy_observation_creature(y_1, 20, 0.02))
mike_v <- mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = y_1_noisy_observation,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
mike_v %>%
ggplot(aes(x = theta, y = posterior)) +
geom_line() +
facet_wrap(~feature_index)
y_1_noisy_observation
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
test_creature_background_theta <- c(0.01, 0.01, 0.01, 0.99, 0.99, 0.8)
test_creature_deviant_theta <- c(0.2, 0.8, 0.8, 0.2, 0.2, 0.9)
#test creature
# these will be a block [y_1, y_2, y_3, y_4, z_1, y_5]
y_1 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_2 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_3 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_4 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
z_1 <-  sapply(test_creature_deviant_theta, function(x){rbernoulli(p = x, n = 1)})
#y_5 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
# in each trial collects like 100 times
y_1_noisy_observation <- rbind(noisy_observation_creature(y_1, 20, 0.02))
y_2_noisy_observation <- rbind(noisy_observation_creature(y_2, 20, 0.02))
y_3_noisy_observation <-  rbind(noisy_observation_creature(y_3, 20, 0.02))
y_4_noisy_observation <-  rbind(noisy_observation_creature(y_4, 30, 0.2))
z_1_noisy_observation <-  rbind(noisy_observation_creature(z_1, 30, 0.2))
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 10,
beta_epsilon = 1
) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 10,
beta_epsilon = 1
) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- dplyr::bind_rows(datalist)
all_updates %>%
filter(update_number %in% seq(1, 20, 1)) %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
y_1
y_2
y_3
all_updates %>%
filter(update_number %in% seq(1, 20, 1)) %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
y_1
y_2
y_3
y_1
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
grid_theta <- seq(0.01, .99, .01)
grid_epsilon <- seq(0.01, .99, .01)
source(here("adult_modeling/scripts/noisy_update.R"))
mike_version_creature <- function(
grid_theta,
grid_epsilon,
noisy_creature_observation,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon
){
# special case this is for when only update based on 1 observation
if(!is.matrix(noisy_creature_observation)){
feature_number = length(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}else{
feature_number = ncol(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[,x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}
}
mike_version_grid_approx <- function(
feature_i,
grid_theta,
grid_epsilon,
observations,
alpha_theta, beta_theta,
alpha_epsilon, beta_epsilon
){
samps <- expand_grid(theta = grid_theta,
epsilon = grid_epsilon)
samps$unnormalized_log_posterior <- mapply(function(x, y)
lp_theta_given_z(z_bar = observations,
theta = x,
epsilon = y,
alpha_theta = alpha_theta,
beta_theta = beta_theta,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon),
samps$theta,
samps$epsilon)
samps$log_posterior = samps$unnormalized_log_posterior - matrixStats::logSumExp(samps$unnormalized_log_posterior)
theta_posterior <- samps %>%
group_by(theta) %>%
summarise(
log_posterior = matrixStats::logSumExp(log_posterior) +
log(1/length(log_posterior))) %>%
mutate(posterior = exp(log_posterior)) %>%
mutate(feature_index = feature_i)
return(theta_posterior)
}
test_creature_background_theta <- c(0.01, 0.01, 0.01, 0.99, 0.99, 0.8)
test_creature_deviant_theta <- c(0.2, 0.8, 0.8, 0.2, 0.2, 0.9)
#test creature
# these will be a block [y_1, y_2, y_3, y_4, z_1, y_5]
y_1 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_2 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_3 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_4 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
z_1 <-  sapply(test_creature_deviant_theta, function(x){rbernoulli(p = x, n = 1)})
#y_5 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
# in each trial collects like 100 times
y_1_noisy_observation <- rbind(noisy_observation_creature(y_1, 20, 0.02))
mike_v <- mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = y_1_noisy_observation,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
datalist = list()
for (i in seq(1, updates, 1)){
mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = y_1_noisy_observation,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i) %>%
rename(log_posterior = normalized_log_posterior)
#   post_first_update_theta_approx <- mike_version_creature(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i) %>%
#     rename(log_posterior = normalized_log_posterior)
datalist[[i]] <-  post_first_update_theta_approx
}
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
datalist = list()
for (i in seq(1, updates, 1)){
mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = y_1_noisy_observation,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
#   post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
datalist = list()
for (i in seq(1, updates, 1)){
mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = y_1_noisy_observation,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i) %>%
rename(log_posterior = normalized_log_posterior)
#   post_first_update_theta_approx <- mike_version_creature(
#   grid_theta = grid_theta,
#   grid_epsilon = grid_epsilon,
#   noisy_creature_observation = three_observations[1:i, ],
#   alpha_prior = 1,
#   beta_prior = 1,
#   alpha_epsilon = 10,
#   beta_epsilon = 1
# ) %>%
#     mutate(update_number = i) %>%
#     rename(log_posterior = normalized_log_posterior)
datalist[[i]] <-  post_first_update_theta_approx
}
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
mike_v <- mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
mike_v %>%
ggplot(aes(x = theta, y = posterior)) +
geom_line() +
facet_wrap(~feature_index)
grid_theta <- seq(0.01, .99, .01)
grid_epsilon <- seq(0.01, .99, .01)
source(here("adult_modeling/scripts/noisy_update.R"))
mike_version_creature <- function(
grid_theta,
grid_epsilon,
noisy_creature_observation,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon
){
# special case this is for when only update based on 1 observation
if(!is.matrix(noisy_creature_observation)){
feature_number = length(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}else{
feature_number = ncol(noisy_creature_observation)
lapply(seq(1, feature_number, 1),
function(x){
mike_version_grid_approx(
feature_i = x,
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = noisy_creature_observation[,x],
alpha_theta = alpha_prior,
beta_theta = beta_prior,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon
)
}
) %>%
bind_rows()
}
}
mike_version_grid_approx <- function(
feature_i,
grid_theta,
grid_epsilon,
observations,
alpha_theta, beta_theta,
alpha_epsilon, beta_epsilon
){
samps <- expand_grid(theta = grid_theta,
epsilon = grid_epsilon)
samps$unnormalized_log_posterior <- mapply(function(x, y)
lp_theta_given_z(z_bar = observations,
theta = x,
epsilon = y,
alpha_theta = alpha_theta,
beta_theta = beta_theta,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon),
samps$theta,
samps$epsilon)
samps$log_posterior = samps$unnormalized_log_posterior - matrixStats::logSumExp(samps$unnormalized_log_posterior)
theta_posterior <- samps %>%
group_by(theta) %>%
summarise(
log_posterior = matrixStats::logSumExp(log_posterior) +
log(1/length(log_posterior))) %>%
mutate(posterior = exp(log_posterior)) %>%
mutate(feature_index = feature_i)
return(theta_posterior)
}
test_creature_background_theta <- c(0.01, 0.01, 0.01, 0.99, 0.99, 0.8)
test_creature_deviant_theta <- c(0.2, 0.8, 0.8, 0.2, 0.2, 0.9)
#test creature
# these will be a block [y_1, y_2, y_3, y_4, z_1, y_5]
y_1 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_2 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_3 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_4 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
z_1 <-  sapply(test_creature_deviant_theta, function(x){rbernoulli(p = x, n = 1)})
#y_5 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
# in each trial collects like 100 times
y_1_noisy_observation <- rbind(noisy_observation_creature(y_1, 20, 0.02))
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
mike_v <- mike_version_creature(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations,
alpha_prior = 1,
beta_prior= 1,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
mike_v %>%
ggplot(aes(x = theta, y = posterior)) +
geom_line() +
facet_wrap(~feature_index)
all_updates %>%
fitler(update_number == 10) %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
y_1
y_2
y_3
y_1
all_updates %>%
filter(update_number == 10) %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
y_1
y_2
y_3
y_1
all_updates %>%
filter(update_number == 1) %>%
#filter(update_number %in% seq(1, 10, 1)) %>%
ggplot(aes(x = theta, y = posterior, color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
