mutate(block_number = block_number + 1) %>%  #block number starts with 0
ggplot(
aes(x=block_number, y=log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_smooth(method = "lm",
formula = y ~ log(x), se = FALSE) +
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
ylab("Looking time)") +
xlab("Trial Number")
RT_data %>%
filter(trial_number != 1) %>%
mutate(block_number = block_number + 1) %>%  #block number starts with 0
ggplot(
aes(x=block_number, y=log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_smooth(method = "lm",
formula = y ~ log(x), se = FALSE) +
facet_wrap(~exposure_type)+
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
ylab("Looking time)") +
xlab("Trial Number")
RT_data %>%
filter(trial_number != 1) %>%
mutate(block_number = block_number + 1) %>%  #block number starts with 0
ggplot(
aes(x=block_number, y=log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_smooth(method = "lm",
formula = y ~ log(x), se = FALSE) +
facet_wrap(~exposure_type)+
scale_x_continuous(breaks = seq(1, 12, 1))+
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
ylab("Looking time)") +
xlab("Trial Number")
RT_data %>%
filter(trial_number != 1) %>%
mutate(block_number = block_number + 1) %>%  #block number starts with 0
ggplot(
aes(x=block_number, y=log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_smooth(method = "lm",
formula = y ~ log(x), se = FALSE) +
facet_wrap(~exposure_type)+
scale_x_continuous(breaks = seq(1, 12, 1))+
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
theme_classic()+
ylab("Looking time)") +
xlab("Trial Number")
RT_data %>%
filter(trial_number != 1) %>%
mutate(block_number = block_number + 1) %>%  #block number starts with 0
ggplot(
aes(x=block_number, y=log(looking_time), colour=trial_complexity)) +
stat_summary(fun.data = "mean_cl_boot", position = position_dodge(width = .2)) +
geom_smooth(method = "lm",
formula = y ~ log(x), se = FALSE) +
facet_wrap(~exposure_type)+
scale_x_continuous(breaks = seq(1, 12, 1))+
langcog::scale_color_solarized(name = "Item Type") +
theme(legend.position = "bottom") +
theme_classic()+
ylab("Looking time)") +
xlab("Block Number") +
labs("Across block looking time change (exclude first trial)")
prunned_model_second_trial <-  lmer(log(looking_time) ~ exposure_type * trial_complexity + (exposure_type * trial_complexity|subject), data = RT_data %>% filter(trial_number == 2))
prunned_model_second_trial <-  lmer(log(looking_time) ~ exposure_type * trial_complexity + (1|subject), data = RT_data %>% filter(trial_number == 2))
summary(prunned_model)$coef %>% knitr::kable(digits = 2)
prunned_model <-  lmer(log(looking_time) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * exposure_type + (1|subject),
data = RT_data)
summary(prunned_model)$coef %>% knitr::kable(digits = 2)
prunned_model_second_trial <-  lmer(log(looking_time) ~ exposure_type * trial_complexity + (1|subject), data = RT_data %>% filter(trial_number == 2))
prunned_model_second_trial$coeffs %>% knitr::kable(digits = 2)
prunned_model_second_trial <-  lmer(log(looking_time) ~ exposure_type * trial_complexity + (1|subject), data = RT_data %>% filter(trial_number == 2))
summary(prunned_model_second_trial)$coeff %>% knitr::kable(digits = 2)
library(papaja)
library(rmarkdown)
library(tidyverse)
library(here)
library(glue)
library(metafor)
library(knitr)
library(PublicationBias)
library(janitor)
library(insight)
library(patchwork)
library(metalabr)
library(pwr)
# scripts for data presentation
source(here("writeups/paper/scripts/prisma_diagram.R"))
library(tidyverse)
dbern(1, 0.7)
i = 1
j = 3
for (exemplar in range(1:i)){
print(exemplar)
}
i = 1
j = 3
for (exemplar in range(1:j)){
print(exemplar)
}
i = 1
j = 3
for (exemplar in seq(1:j)){
print(exemplar)
}
i = 1
j = 3
for (exemplar in seq(1:i)){
print(exemplar)
}
i = 1
j = 3
for (exemplar in seq(1:j)){
print(exemplar)
}
i = 1
j = 3
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
print(timepoint)
}
}
i = 2
j = 3
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
print(timepoint)
}
}
i = 1
j = 3
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
print(timepoint)
}
}
i = 1
j = 3
theta = 0.6
epsilon = 0.7
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
}
}
get_z_i_j_given_theta <- function(i, j, theta, epsilon){
z_i_j_given_y_i_is_one = epsilon # very questionable
y_i_is_one_given_theta = theta # bernoulli?
z_i_j_given_y_i_is_zero = 1- epsilon # very questionable
y_i_is_zero_given_theta = 1 - theta
z_ij_given_theta = z_i_j_given_y_i_is_one * y_i_is_one_given_theta +
z_i_j_given_y_i_is_zero *y_i_is_zero_given_theta
return (z_ij_given_theta)
}
i = 1
j = 3
theta = 0.6
epsilon = 0.7
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
}
}
z_ij_given_theta
i = 1
j = 3
theta = 0.6
epsilon = 0.7
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
?beta
?Beta
install.packages("rbeta2009")
install.packages("rBeta2009")
rbeta(10, 0.7, 1.5)
rbeta(1, 0.7, 1.5)
alpha  = 1
beta = 2
theta <- rbeta(10, 1,  2)
alpha  = 1
beta = 2
theta <- rbeta(10, 1,  2)
theta
alpha  = 1
beta = 2
theta <- rbeta(1, 1,  2)
theta
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
theta
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = N,
size = 1,
prob = theta)
flips_rb
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 1,
size = 1,
prob = theta)
flips_rb
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 30,
size = 1,
prob = theta)
flips_rb
?rbinom
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 30,
size = 1,
prob = theta)
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 1,
size = 1,
prob = theta)
flips_rb
flips_rb
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 1,
size = 20,
prob = theta)
flips_rb
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 20,
size = 1,
prob = theta)
flips_rb
sample.space <- c(0,1)
theta <- rbeta(1, 1,  2)
theta
N <- 20 # we want to flip a coin 20 times
flips <- sample(sample.space,
size = N,
replace = TRUE,
prob = c(theta, 1 - theta))
flips_rb <- rbinom(n = 1,
size = 1,
prob = theta)
flips_rb
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
prod(all_z_ij_given_theta) # literally everything was the same?
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
prod(all_z_ij_given_theta) # literally everything was the same?
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
prod(all_z_ij_given_theta) # literally everything was the same?
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
prod(all_z_ij_given_theta) # literally everything was the same?
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
prod(all_z_ij_given_theta) # literally everything was the same?
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.6)
all_z_ij_given_theta = c()
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
all_z_ij_given_theta
z_overbar_given_theta <- prod(all_z_ij_given_theta) # literally everything was the same?
z_overbar_given_theta
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.4, 0.6, 0.8)
all_z_overbar_given_theta = c()
all_z_ij_given_theta = c()
for (theta_index in seq(1:length(thetas))){
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
theta = thetas[theta_index]
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
z_overbar_given_theta <-  prod(all_z_ij_given_theta)
all_z_overbar_given_theta <- c(z_overbar_given_theta)
}
all_z_ij_given_theta
# literally everything was the same?
all_z_overbar_given_theta
z_overbar_given_theta
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.4, 0.6, 0.8)
all_z_overbar_given_theta = c()
all_z_ij_given_theta = c()
for (theta_index in seq(1:length(thetas))){
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
theta = thetas[theta_index]
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
z_overbar_given_theta <-  prod(all_z_ij_given_theta)
all_z_overbar_given_theta <- c(z_overbar_given_theta)
}
all_z_ij_given_theta
# literally everything was the same?
all_z_overbar_given_theta
z_overbar_given_theta
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.4, 0.6, 0.8)
all_z_overbar_given_theta = c()
all_z_ij_given_theta = c()
for (theta_index in seq(1:length(thetas))){
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
theta = thetas[theta_index]
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
z_overbar_given_theta <-  prod(all_z_ij_given_theta)
all_z_overbar_given_theta <- c(z_overbar_given_theta)
}
all_z_ij_given_theta
# literally everything was the same?
all_z_overbar_given_theta
z_overbar_given_theta
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.4, 0.6, 0.8)
all_z_overbar_given_theta = c()
all_z_ij_given_theta = c()
for (theta_index in seq(1:length(thetas))){
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
theta = thetas[theta_index]
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
z_overbar_given_theta <-  prod(all_z_ij_given_theta)
all_z_overbar_given_theta <- c(z_overbar_given_theta, z_overbar_given_theta)
}
all_z_ij_given_theta
# literally everything was the same?
all_z_overbar_given_theta
z_overbar_given_theta
i = 1
j = 3
epsilon = 0.7
thetas = c(0.2, 0.4, 0.6, 0.8)
all_z_overbar_given_theta = c()
all_z_ij_given_theta = c()
for (theta_index in seq(1:length(thetas))){
for (exemplar in seq(1:i)){
for (timepoint in seq(1:j)){
theta = thetas[theta_index]
z_ij_given_theta = get_z_i_j_given_theta(i, j, theta, epsilon)
all_z_ij_given_theta = c(all_z_ij_given_theta, z_ij_given_theta)
}
}
z_overbar_given_theta <-  prod(all_z_ij_given_theta)
all_z_overbar_given_theta <- c(all_z_overbar_given_theta, z_overbar_given_theta)
}
all_z_ij_given_theta
# literally everything was the same?
all_z_overbar_given_theta
z_overbar_given_theta
all_z_ij_given_theta
all_z_overbar_given_theta
all_z_overbar_given_theta
all_z_overbar_given_theta * theta
z_overbar = sum(all_z_overbar_given_theta * thetas)
z_overbar
all_z_overbar_given_theta
posterior_distribution = (all_z_overbar_given_theta * thetas) / z_overbar
posterior_distribution
