trial_number = row_number()) %>%
mutate(
trial_type = case_when(
stimulus_displayed == block_deviant ~ "deviant",
TRUE ~ "background"
),
trial_complexity = case_when(
grepl("simple", stimulus_displayed) ~ "simple",
grepl("complex", stimulus_displayed) ~ "complex"
)
) %>%
mutate(trial_complexity = factor(trial_complexity, levels = c("simple", "complex"))) %>%
mutate(block_similarity = case_when(
grepl("_similar", block_type) ~ "similar",
grepl("_dissimilar", block_type) ~ "dissimilar"
)
) %>%
mutate(item_type = case_when(
trial_type == 'background' ~ trial_type,
trial_type == 'deviant' ~ paste(block_similarity, 'deviant')
)
) %>%
mutate(item_type = factor(
item_type,
levels = c("background",
"similar deviant",
"dissimilar deviant")
)
)  %>%
mutate(item_id =
str_match(stimulus_displayed, "spore_stims/\\s*(.*?)..\\s*.gif")[,2]
)  %>%
select(subject, block_number, block_type, trial_number, item_type, trial_type, trial_complexity, item_id, rt) %>%
transform(rt = as.numeric(rt)) %>%
mutate(half = case_when(
block_number <= max(block_number)/2 ~ 'first half' ,
block_number > max(block_number)/2 ~ 'second half',
)
)
write_csv(df.processed, here('data/processed_data/processed_RTdata.csv'))
# df.main
# complexity doesn't have trial type
df.similarity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="similarity") %>%
select(subject, question_type, rt, responses, stimulus_left, stimulus_right) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus_left, stimulus_right, rating)
write_csv(df.similarity, here('data/processed_data/processed_similaritydata.csv'))
df.complexity <- df.raw %>%
filter(trial_type == "survey-likert") %>%
mutate(
question_type = case_when(
stimulus_type == "similarity_question" ~ "similarity",
TRUE ~ "complexity"
)
) %>%
filter(question_type =="complexity") %>%
select(subject, question_type, rt, responses, stimulus) %>%
# a dumb way to extrat the rating
separate(responses, into = c("question", "raw_answer"), sep = ":") %>%
mutate(
rating = as.numeric(str_extract(raw_answer, "[[:digit:]]+"))) %>%
select(subject, question_type, stimulus, rating)
write_csv(df.complexity, here('data/processed_data/processed_complexitydata.csv'))
df.demog <- df.raw  %>%
filter(grepl("demog", trial_type)) %>%
select(subject, trial_type, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
demog_question = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(demog_question)  %>%
group_by(subject) %>%
mutate_at(vars(-group_cols()), function(x) {x[!is.na(x)][1]}) %>%
distinct() %>%
select(-responses, -trial_type)
write_csv(df.demog, here('data/processed_data/processed_demogdata.csv'))
View(df.raw)
View(df.raw)
df.raw %>%
filter(stimulus_type == "math_question")
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
demog_question = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(demog_question)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
Q0 = as.numeric(Q0)
)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
Q0 = as.character(Q0)
)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
Q0 = as.numeric(as.character(Q0))
)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
filter(correct_response == FALSE)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
filter(correct_response == TRUE)
df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
group_by(subject) %>%
summarize(
total_question = n(),
correct_question = sum(correct_response),
percent_correct = correct_question / total_question
)
attention_check_sbj <- df.attention_check %>%
filter(percent_correct < 0.8)
df.attention_check <- df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
group_by(subject) %>%
summarize(
total_question = n(),
correct_question = sum(correct_response),
percent_correct = correct_question / total_question
)
df.attention_check %>%
filter(percent_correct < 0.8)
df.attention_check %>%
filter(percent_correct < 1)
df.attention_check <- df.raw %>%
filter(stimulus_type == "math_question") %>%
select(subject, responses, math_correct_answer) %>%
toJSON() %>%
fromJSON() %>%
mutate(
math_response = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(math_response) %>%
mutate(
math_correct_answer = as.numeric(math_correct_answer),
math_response = as.numeric(as.character(Q0))
) %>%
mutate(
correct_response = (math_correct_answer == math_response)
) %>%
group_by(subject) %>%
summarize(
total_question = n(),
correct_question = sum(correct_response),
percent_correct = correct_question / total_question
)
# attention check participant
attention_check_sbj <- df.attention_check %>%
filter(percent_correct < 0.8) %>%
pull(subject)
# similarity rating
similarity_sbj <- df.similarity %>%
count(subject, rating) %>%
filter(n > 20 * 0.8) %>%  # twenty trials, 80% identical rating
pull(subject)
#similarity_sbj
complexity_sbj <- df.complexity %>%
count(subject, rating) %>%
filter(n > 20 * 0.8) %>%  # twenty trials, 80% identical rating
pull(subject)
exlude_participant <- unique(c(similarity_sbj,
complexity_sbj,
attention_check_sbj))
df.rt_trimmed <- df.processed %>% filter(!(subject %in% exlude_participant))
#df.pref_trimmed <- df.pref %>% filter(!(subject %in% exlude_participant))
df.complexity_trimmed <- df.complexity %>% filter(!(subject %in% exlude_participant))
df.similarity_trimmed <- df.similarity %>% filter(!(subject %in% exlude_participant))
df.demog_trimmmed <- df.demog %>% filter(!(subject %in% exlude_participant))
write_csv(df.rt_trimmed, here('data/processed_data/trimmed_RTdata.csv'))
#write_csv(df.pref_trimmed, here('data/processed_data/trimmed_prefdata.csv'))
write_csv(df.demog_trimmmed, here('data/processed_data/trimmed_demogdata.csv'))
write_csv(df.similarity_trimmed, here('data/processed_data/trimmed_similaritydata.csv'))
write_csv(df.complexity_trimmed, here('data/processed_data/trimmed_complexitydata.csv'))
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
#pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data %>%
distinct(subject) %>%
count()
# reorder
RT_data$trial_complexity = factor(RT_data$trial_complexity, levels=c('simple', 'complex'))
RT_data$item_type = factor(RT_data$item_type, levels=c('background', 'similar deviant', 'dissimilar deviant'))
demog_data %>%
ggplot(aes(x = age)) +
geom_histogram()
demog_data %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = gender)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data %>%
ggplot(aes(x = education)) +
geom_histogram(stat = "count") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_grid(block_type~trial_type)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~trial_complexity)
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~block_type)
RT_data %>%
filter(trial_complexity == "simple") %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~item_id)
similarity_data %>%
ggplot(aes(x = rating))+
geom_histogram(bins = 30)
similarity_data <- similarity_data %>%
mutate(
complexity = case_when(
grepl("complex", stimulus_left) | grepl("complex", stimulus_right) ~ "complex",
grepl("simple", stimulus_right) | grepl("simple", stimulus_right) ~ "simple"
),
stimulus_left_number = as.numeric(str_extract(stimulus_left, "[[:digit:]]+")),
stimulus_right_number = as.numeric(str_extract(stimulus_right, "[[:digit:]]+")),
similarity = case_when(
stimulus_left_number == stimulus_right_number ~ "similar",
TRUE ~ "dissimilar"
)
)
similarity_data %>%
ggplot(aes(x = similarity, y= rating)) +
geom_point(alpha = 0.1,
position = position_jitter(width = 0.3)) +
stat_summary(fun.data = "mean_cl_boot") +
facet_wrap(~complexity)
complexity_data %>%
ggplot(aes(x = rating))+
geom_histogram(bins = 30)
complexity_data <- complexity_data %>%
mutate(
complexity = case_when(
grepl("complex", stimulus) ~ "complex",
grepl("simple", stimulus) ~ "simple"
)
)
complexity_data %>%
ggplot(aes(x = complexity, y = rating)) +
geom_point(alpha = 0.1,
position = position_jitter(width = 0.3)) +
stat_summary(fun.data = "mean_cl_boot")
complexity_action <- complexity_data %>%
mutate(item_id_full =
str_match(stimulus, "spore_stims/\\s*(.*?).gif")[,2],
item_id_no_action = str_match(stimulus, "spore_stims/\\s*(.*?)..\\s*.gif")[,2],
action_type = str_sub(item_id_full, -1))
action_summary <- complexity_action %>%
group_by(action_type) %>%
tidyboot::tidyboot_mean(rating)
action_summary %>%
ggplot(aes(x = action_type, y = mean)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper))
complexity_summary <- complexity_action %>%
group_by(item_id_no_action) %>%
tidyboot::tidyboot_mean(rating) %>%
mutate(
complexity = case_when(
grepl("complex", item_id_no_action) ~ "complex",
TRUE ~ "simple")
)
complexity_summary %>%
ggplot(aes(x = reorder(item_id_no_action, mean), y = mean, color = complexity)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(1.5)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
log_rt_deviant <- RT_data %>%
filter(trial_type == "deviant") %>%
group_by(item_id) %>%
tidyboot::tidyboot_mean(log(rt)) %>%
mutate(type = "log_rt",
complexity = case_when(
grepl("complex", item_id) ~ "complex",
TRUE ~ "simple")
)
complexity_temp <- complexity_summary %>%
mutate(type = "rating") %>%
mutate(item_id = item_id_no_action) %>%
select(-item_id_no_action)
dishab_df <- bind_rows(log_rt_deviant,
complexity_temp)
dishab_df
dishab_df %>%
ggplot(aes(x = reorder(item_id, mean), y = mean,
color = complexity,
shape = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(1.5)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
c_temp <- complexity_temp %>%
select(item_id, complexity, mean) %>%
rename(mean_rating = mean)
log_rt_deviant %>%
select(item_id, mean) %>%
rename(log_mean_dishab = mean) %>%
left_join(c_temp, by = "item_id") %>%
ggplot(aes(x = mean_rating, y = log_mean_dishab,
color = complexity)) +
geom_point()
log_rt_deviant %>%
filter(complexity == "complex") %>%
select(item_id, mean) %>%
rename(log_mean_dishab = mean) %>%
left_join(c_temp, by = "item_id") %>%
ggplot(aes(x = mean_rating, y = log_mean_dishab,
color = complexity)) +
geom_point() +
geom_smooth(method = "lm")
log_rt_deviant %>%
filter(complexity == "simple") %>%
select(item_id, mean) %>%
rename(log_mean_dishab = mean) %>%
left_join(c_temp, by = "item_id") %>%
ggplot(aes(x = mean_rating, y = log_mean_dishab,
color = complexity)) +
geom_point() +
geom_smooth(method = "lm")
log_rt_deviant <- RT_data %>%
filter(trial_type == "deviant") %>%
group_by(item_id, half) %>%
tidyboot::tidyboot_mean(log(rt)) %>%
mutate(type = "log_rt",
complexity = case_when(
grepl("complex", item_id) ~ "complex",
TRUE ~ "simple")
)
complexity_temp <- complexity_summary %>%
mutate(type = "rating") %>%
mutate(item_id = item_id_no_action) %>%
select(-item_id_no_action)
dishab_df <- bind_rows(log_rt_deviant,
complexity_temp)
dishab_df
c_temp <- complexity_temp %>%
select(item_id, complexity, mean) %>%
rename(mean_rating = mean)
log_rt_deviant %>%
select(item_id, mean, half) %>%
rename(log_mean_dishab = mean) %>%
left_join(c_temp, by = "item_id") %>%
ggplot(aes(x = mean_rating, y = log_mean_dishab,
color = complexity)) +
geom_point() +
facet_wrap(~half)
similarity_data %>%
mutate(
stimulus_left_id =  str_match(stimulus_left, "spore_stims/\\s*(.*?)..\\s*.gif")[,2],
stimulus_right_id = str_match(stimulus_right, "spore_stims/\\s*(.*?)..\\s*.gif")[,2],
) %>%
group_by(stimulus_left_id, similarity) %>%
tidyboot::tidyboot_mean(rating) %>%
ggplot(aes(x = reorder(stimulus_left_id, mean), y = mean,
color = similarity)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
