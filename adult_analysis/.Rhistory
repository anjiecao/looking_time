for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(.))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(.x))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(x))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(.))
View(df.sim[[2]][[1]])
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = ~ poli_model_pokebaby(.))
df.sim
View(df.sim)
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(.))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby())
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = poli_model_pokebaby(seq))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = ~ poli_model_pokebaby(.) %>% nest())
df.sim
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = ~ poli_model_pokebaby(.) %>% mutate(test = nest()))
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
map_df(.x = seq,
.f = ~ poli_model_pokebaby(.))
df.sim
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
)
df.sim
SIM = 100
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
rowwise() %>%
mutate(
model = poli_model_pokebaby(seq) %>% nest()
)
SIM = 120
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
rowwise() %>%
mutate(
model = poli_model_pokebaby(seq) %>% nest()
)
SIM = 3
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
rowwise() %>%
mutate(
model = poli_model_pokebaby(seq) %>% nest()
)
df.sim
df.sim %>%
unnest(model)
View(df.sim)
View(df.sim[[3]][[1]])
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
mutate(
model = poli_model_pokebaby(seq) %>% nest()
)
df.sim %>%
unnest(model)
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
mutate(
model = poli_model_pokebaby(seq)
)
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
) %>%
mutate(
model = poli_model_pokebaby(seq)
)
SIM = 3
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
)
df.sim %>%
unnest(model)
SIM = 3
NUM_BLOCK = 10
DEVIANT_POSITIONS = c(3,4,5,6,7)
generate_sequence <- function(num_block, deviant_position){
all_block<- c()
for (block in 1:num_block){
block_pair <- sample(1:3, 2, replace=F)
background <- block_pair[1]
deviant <- block_pair[2]
# fill the sequence with the background
block_seq <- rep(background, 8)
# randomly sample from the deviant position
location <- sample(deviant_position, 1)
block_seq[location] <- deviant
all_block <- c(ALL_BLOCKS, block_seq)
}
return(all_block)
}
df.sim <- tibble(index = seq(1:SIM)) %>%
rowwise() %>%
mutate(
seq = list(generate_sequence(NUM_BLOCK, DEVIANT_POSITIONS))
)
View(df.sim)
View(RT_data)
gam_m <- gam(rt ~ s(trial_number),
data = gam_d,
method = "REML")
library(mgcv)
gam_d <- full_aggregated %>%
filter(trial_stimulus_type == "background") %>%
mutate(trial_stimulus_complexity = as.factor(trial_stimulus_complexity),
half = as.factor(block))
library(mgcv)
gam_d <- RT_data %>%
filter(trial_stimulus_type == "background") %>%
mutate(trial_stimulus_complexity = as.factor(trial_stimulus_complexity),
half = as.factor(block))
library(mgcv)
gam_d <- RT_data %>%
filter(trial_type == "background") %>%
mutate(trial_complexity = as.factor(trial_complexity),
block = as.factor(block))
View(RT_data)
gam_m <- gam(rt ~ s(trial_number),
data = gam_d,
method = "REML")
library(mgcv)
gam_d <- RT_data %>%
filter(trial_type == "background") %>%
mutate(trial_complexity = as.factor(trial_complexity))
gam_m <- gam(rt ~ s(trial_number),
data = gam_d,
method = "REML")
gam_m <- gam(log(rt) ~ s(trial_number),
data = gam_d,
method = "REML")
View(gam_d)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(lme4)
library(xtable)
library(lmerTest)
library(broom)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
model <- lmer('log(rt) ~ trial_number*item_type*trial_complexity  + (trial_complexity*item_type*trial_number|subject)', data=RT_data, REML=FALSE)
summary(model)
broom.mixed::tidy(model) %>%
knitr::kable()
summary(model)
model <- lmer('log(rt) ~ trial_number*item_type*trial_complexity  + (1|subject)', data=RT_data, REML=FALSE)
model <- lmer('log(rt) ~ trial_number*item_type*trial_complexity  + (1|subject)', data=RT_data, REML=FALSE)
summary(model)
model_full <- lmer('log(rt) ~ trial_number*item_type*trial_complexity  + (trial_complexity*item_type*trial_number|subject)', data=RT_data, REML=FALSE)
#boundary (singular) fit: see ?isSingular
summary(model_full)
