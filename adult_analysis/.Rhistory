filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
prob <- calculate_probability(prior_belief_mu,
prior_belief_sigma,
observation)
probs <- c(probs, prob)
}
example_with_probs <- example %>%
filter(time_point != 1)
example_with_probs$prob <- probs
example_with_probs %>%
ggplot(aes(x = time_point,
y = probs)) +
geom_point() +
geom_line()
# the probablity of getting the observation X given the prior belief
probs <- c()
for (t in 2:101){
observation <- example %>%
filter(time_point == t) %>%
select(observation) %>%
pull()
prior_belief_mu <- example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
prior_belief_sigma <- (example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
prob <- calculate_probability(prior_belief_mu,
prior_belief_sigma,
observation)
probs <- c(probs, prob)
}
example_with_probs <- example %>%
filter(time_point != 1)
example_with_probs$prob <- probs
example_with_probs %>%
ggplot(aes(x = time_point,
y = probs)) +
geom_point() +
geom_line()
example_with_prob %>%
mutate(surprise = -log(prob)) %>%
ggplot(aes(x = time_point,
y = surprise)) +
geom_point() +
geom_line()
# the probablity of getting the observation X given the prior belief
probs <- c()
for (t in 2:101){
observation <- example %>%
filter(time_point == t) %>%
select(observation) %>%
pull()
prior_belief_mu <- example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
prior_belief_sigma <- (example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
prob <- calculate_probability(prior_belief_mu,
prior_belief_sigma,
observation)
probs <- c(probs, prob)
}
example_with_probs <- example %>%
filter(time_point != 1)
example_with_probs$prob <- probs
example_with_probs %>%
ggplot(aes(x = time_point,
y = probs)) +
geom_point() +
geom_line()
example_with_probs %>%
mutate(surprise = -log(prob)) %>%
ggplot(aes(x = time_point,
y = surprise)) +
geom_point() +
geom_line()
# signal received after choosing the item
s_mu = 5 # unknown true value of item being sampled
s_variance = 3 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# pretend to have 100 time points
belief_precision_vector <- c(b_precision)
belief_mu_vector <- c(b_mu)
observation_vector <- c(s_x)
for (i in 1:100){
current_belief_precision = belief_precision_vector[i]
current_belief_mu = belief_mu_vector[i]
s_mu = 5 # unknown true value of item being sampled
s_variance = 1.8 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
observation_vector <- c(observation_vector, s_x)
updated_belief_precision = update_precision(current_belief_precision,
s_precision)
updated_mu = update_belief(s_precision,
s_x,
current_belief_precision,
current_belief_mu,
updated_belief_precision)
belief_precision_vector <- c(belief_precision_vector, updated_belief_precision)
belief_mu_vector <- c(belief_mu_vector, updated_mu)
}
blurrier_example <- tibble("time_point" = seq(1, 101, 1),
"belief" = belief_mu_vector,
"precision" = belief_precision_vector,
"observation" = observation_vector,
) %>%
mutate("variance" = 1/precision) %>%
mutate(noise_in_signal = s_variance)
blurrier_example
example <- bind_rows(example, blurrier_example)
# belief about the item
b_mu = .2
b_variance = 0.3
b_precision = 1/b_variance
b_prior_distribution = rnorm(100,
b_mu,
b_variance)
b_prior = sample(b_prior_distribution, 1)
# signal received after choosing the item
s_mu = 5 # unknown true value of item being sampled
s_variance = 1.8 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# pretend to have 100 time points
belief_precision_vector <- c(b_precision)
belief_mu_vector <- c(b_mu)
observation_vector <- c(s_x)
for (i in 1:100){
current_belief_precision = belief_precision_vector[i]
current_belief_mu = belief_mu_vector[i]
s_mu = 5 # unknown true value of item being sampled
s_variance = 1.8 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
observation_vector <- c(observation_vector, s_x)
updated_belief_precision = update_precision(current_belief_precision,
s_precision)
updated_mu = update_belief(s_precision,
s_x,
current_belief_precision,
current_belief_mu,
updated_belief_precision)
belief_precision_vector <- c(belief_precision_vector, updated_belief_precision)
belief_mu_vector <- c(belief_mu_vector, updated_mu)
}
example <- tibble("time_point" = seq(1, 101, 1),
"belief" = belief_mu_vector,
"precision" = belief_precision_vector,
"observation" = observation_vector,
) %>%
mutate("variance" = 1/precision) %>%
mutate(noise_in_signal = s_variance)
kls <- c()
for (t in 2:101){
mu1 <- blurrier_example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
sig1 <- (blurrier_example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
mu2 <- blurrier_example %>%
filter(time_point == t) %>%
select(belief) %>%
pull()
sig2 <- (blurrier_example %>%
filter(time_point == t) %>%
select(variance) %>%
pull()) ^ .5
kl <- calculate_KL_between_gaussian(mu1, mu2, sig1, sig2)
kls <- c(kls, kl)
}
blurrier_example_with_kl <- blurrier_example %>%
filter(time_point != 1)
blurrier_example_with_kl$kl <- kls
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_in_signal)) +
geom_point() +
geom_line()
# signal received after choosing the item
s_mu = 5 # unknown true value of item being sampled
s_variance = 3 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# pretend to have 100 time points
belief_precision_vector <- c(b_precision)
belief_mu_vector <- c(b_mu)
observation_vector <- c(s_x)
for (i in 1:100){
current_belief_precision = belief_precision_vector[i]
current_belief_mu = belief_mu_vector[i]
s_mu = 5 # unknown true value of item being sampled
s_variance = 3 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
observation_vector <- c(observation_vector, s_x)
updated_belief_precision = update_precision(current_belief_precision,
s_precision)
updated_mu = update_belief(s_precision,
s_x,
current_belief_precision,
current_belief_mu,
updated_belief_precision)
belief_precision_vector <- c(belief_precision_vector, updated_belief_precision)
belief_mu_vector <- c(belief_mu_vector, updated_mu)
}
blurrier_example <- tibble("time_point" = seq(1, 101, 1),
"belief" = belief_mu_vector,
"precision" = belief_precision_vector,
"observation" = observation_vector,
) %>%
mutate("variance" = 1/precision) %>%
mutate(noise_in_signal = s_variance)
example <- bind_rows(example, blurrier_example)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = rnorm(100,
unknown_true_value_for_c,
fp_amount_of_noise ^ 2)
hist(signal_for_c)
percision_at_time_t0 = 0.2
utility_at_t0 = .1
precision_at_t1 = percision_at_time_t0 + fp_amount_of_noise ^ (-2)
utilitiy_at_t1 = (fp_amount_of_noise ^ (-2) * sample(signal_for_c, 1) + percision_at_time_t0 * utility_at_t0) / precision_at_t1
precision_at_t1
utilitiy_at_t1
# belief about the item
b_mu = 1
b_variance = 0.1
b_precision = 1/b_variance
b_prior_distribution = rnorm(100,
b_mu,
b_variance)
b_prior = sample(b_prior_distribution, 1)
# signal received after choosing the item
s_mu = 0.8 # unknown true value of item being sampled
s_variance = 0.1 # the amount of noise in each signal
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# update the belief after receiving the item
b_new_precision = b_precision + s_precision
b_posterior = ((s_precision * s_x) + (b_precision * b_prior)) / b_new_precision
update_precision <- function(prior_belief_precision,
signal_precision){
return (prior_belief_precision + signal_precision)
}
update_belief <- function(signal_precision,
signal_value,
belief_precision,
belief_value,
updated_signal_precision){
updated_belief <- ((signal_precision * signal_value) +
(belief_precision * belief_value)) / updated_signal_precision
return (updated_belief)
}
calculate_KL_between_gaussian <- function(mu1, mu2, sig1, sig2){
return(log(sig2/sig1) + (sig1^2 + (mu1-mu2)^2)/(2*(sig2^2)) - 1/2)
}
calculate_probability <- function(mu, sigma, value){
return (pnorm(value, mean = mu, sd = sigma, lower.tail = FALSE))
}
# belief about the item
b_mu = .2
b_variance = 0.3
b_precision = 1/b_variance
b_prior_distribution = rnorm(100,
b_mu,
b_variance)
b_prior = sample(b_prior_distribution, 1)
# signal received after choosing the item
s_mu = 5 # unknown true value of item being sampled
s_variance = 1.8 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# pretend to have 100 time points
belief_precision_vector <- c(b_precision)
belief_mu_vector <- c(b_mu)
observation_vector <- c(s_x)
for (i in 1:100){
current_belief_precision = belief_precision_vector[i]
current_belief_mu = belief_mu_vector[i]
s_mu = 5 # unknown true value of item being sampled
s_variance = 1.8 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
observation_vector <- c(observation_vector, s_x)
updated_belief_precision = update_precision(current_belief_precision,
s_precision)
updated_mu = update_belief(s_precision,
s_x,
current_belief_precision,
current_belief_mu,
updated_belief_precision)
belief_precision_vector <- c(belief_precision_vector, updated_belief_precision)
belief_mu_vector <- c(belief_mu_vector, updated_mu)
}
example <- tibble("time_point" = seq(1, 101, 1),
"belief" = belief_mu_vector,
"precision" = belief_precision_vector,
"observation" = observation_vector,
) %>%
mutate("variance" = 1/precision) %>%
mutate(noise_in_signal = s_variance)
# signal received after choosing the item
s_mu = 5 # unknown true value of item being sampled
s_variance = 3 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
# pretend to have 100 time points
belief_precision_vector <- c(b_precision)
belief_mu_vector <- c(b_mu)
observation_vector <- c(s_x)
for (i in 1:100){
current_belief_precision = belief_precision_vector[i]
current_belief_mu = belief_mu_vector[i]
s_mu = 5 # unknown true value of item being sampled
s_variance = 3 # the amount of noise in each signal, varying this will change the curve of KL. more noise slower habituation
s_precision = 1/s_variance
s_x_distribution = rnorm(100,
s_mu,
s_variance)
s_x = sample(s_x_distribution, 1)
observation_vector <- c(observation_vector, s_x)
updated_belief_precision = update_precision(current_belief_precision,
s_precision)
updated_mu = update_belief(s_precision,
s_x,
current_belief_precision,
current_belief_mu,
updated_belief_precision)
belief_precision_vector <- c(belief_precision_vector, updated_belief_precision)
belief_mu_vector <- c(belief_mu_vector, updated_mu)
}
blurrier_example <- tibble("time_point" = seq(1, 101, 1),
"belief" = belief_mu_vector,
"precision" = belief_precision_vector,
"observation" = observation_vector,
) %>%
mutate("variance" = 1/precision) %>%
mutate(noise_in_signal = s_variance)
example
kls <- c()
for (t in 2:101){
mu1 <- example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
sig1 <- (example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
mu2 <- example %>%
filter(time_point == t) %>%
select(belief) %>%
pull()
sig2 <- (example %>%
filter(time_point == t) %>%
select(variance) %>%
pull()) ^ .5
kl <- calculate_KL_between_gaussian(mu1, mu2, sig1, sig2)
kls <- c(kls, kl)
}
example_with_kl <- example %>%
filter(time_point != 1)
example_with_kl$kl <- kls
example_with_kl %>%
ggplot(aes(x = time_point,
y = kl)) +
geom_point() +
geom_line()
kls <- c()
for (t in 2:101){
mu1 <- blurrier_example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
sig1 <- (blurrier_example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
mu2 <- blurrier_example %>%
filter(time_point == t) %>%
select(belief) %>%
pull()
sig2 <- (blurrier_example %>%
filter(time_point == t) %>%
select(variance) %>%
pull()) ^ .5
kl <- calculate_KL_between_gaussian(mu1, mu2, sig1, sig2)
kls <- c(kls, kl)
}
blurrier_example_with_kl <- blurrier_example %>%
filter(time_point != 1)
blurrier_example_with_kl$kl <- kls
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_in_signal)) +
geom_point() +
geom_line()
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_in_signal)) +
geom_point() +
geom_smooth()
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
(noise_level = if_else(noise_in_signal == 1.8, "low", "high"))
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
mutate(noise_level = if_else(noise_in_signal == 1.8, "low", "high")) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_level)) +
geom_point() +
geom_smooth()
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
mutate(noise_level = if_else(noise_in_signal == 1.8, "low", "high")) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_level)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ I(exp(1)**(-x)), se = FALSE)
bind_rows(blurrier_example_with_kl, example_with_kl) %>%
mutate(noise_level = if_else(noise_in_signal == 1.8, "low", "high")) %>%
filter(time_point < 25) %>%
ggplot(aes(x = time_point,
y = kl,
color = noise_level)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ I(exp(1)**(-x)), se = FALSE)
# the probablity of getting the observation X given the prior belief
probs <- c()
for (t in 2:101){
observation <- example %>%
filter(time_point == t) %>%
select(observation) %>%
pull()
prior_belief_mu <- example %>%
filter(time_point == t-1) %>%
select(belief) %>%
pull()
prior_belief_sigma <- (example %>%
filter(time_point == t-1) %>%
select(variance) %>%
pull()) ^ .5
prob <- calculate_probability(prior_belief_mu,
prior_belief_sigma,
observation)
probs <- c(probs, prob)
}
example_with_probs <- example %>%
filter(time_point != 1)
example_with_probs$prob <- probs
example_with_probs %>%
ggplot(aes(x = time_point,
y = probs)) +
geom_point() +
geom_line()
example_with_probs %>%
mutate(surprise = -log(prob)) %>%
ggplot(aes(x = time_point,
y = surprise)) +
geom_point() +
geom_line()
