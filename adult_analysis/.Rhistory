facet_wrap(~feature_index)
library(cowplot)
library(tidyverse)
library(here)
library(jsonlite)
library(kableExtra)
library(DT)
library(Dict)
library(ggforce)
library(ggimage)
library(tidyboot)
library(lme4)
library(raincloudplots)
library(RColorBrewer)
library(reshape2)
library(BayesFactor)
library(brms)
source(here("main/03_scripts/R_rainclouds.R"))
library(tidyverse)
library(matrixStats)
library(here)
source(here("adult_modeling/scripts/grid_approximation.R"))
source(here("adult_modeling/scripts/noisy_update.R"))
source(here("adult_modeling/scripts/get_stimuli_and_observations.R"))
obs_1<-generate_noisy_observations(
block = t,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2
obs_1
t
generate_noisy_observations
obs_2
obs_2<-generate_noisy_observations(
block = t,
exposure_type = "forced_short",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
obs %>%
group_by(update_step, exp_type) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
fill = exp_type)) +
geom_line()
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(exp_type = "self-paced")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(exp_type = "forced_short")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, exp_type) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
fill = exp_type)) +
geom_line()
obs %>%
group_by(update_step, exp_type) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
fill = color)) +
geom_line()
obs %>%
group_by(update_step, exp_type) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = exp_type)) +
geom_line()
obs %>%
group_by(update_step, exp_type) %>%
ggplot(aes(x = update_step,
y = kl)) +
geom_line() +
facet_wrap(~feature_index)
obs %>%
group_by(update_step, exp_type) %>%
ggplot(aes(x = update_step,
y = kl,
color = exp_type)) +
geom_line() +
facet_wrap(~feature_index)
obs_1[[1]]
obs_2[[1]]
nrow[[obs_1[[1]]]]
nrow(obs_1[[1]])
nrow(obs_2[[1]])
generate_noisy_observations
obs_1
lapply(obs_1, function(x){length(x)})
lapply(obs_2, function(x){length(x)})
generate_noisy_observations
git pull
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 10,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 40,
dissimilar_ratio = 0.8)
obs_1<-generate_noisy_observations(
block = t_simple,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
# i should specify the trial number
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(complexity = "simple")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(complexity = "complex")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, exp_type) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(complexity = "simple")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(complexity = "complex")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
ggplot(aes(x = update_step,
y = kl,
color = complexity)) +
geom_line() +
facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
filter(update_step < 11) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line()
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 3,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 8,
dissimilar_ratio = 0.8)
obs_1<-generate_noisy_observations(
block = t_simple,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
# i should specify the trial number
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(complexity = "simple")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(complexity = "complex")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
ggplot(aes(x = update_step,
y = kl,
color = complexity)) +
geom_line() +
facet_wrap(~feature_index)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 8,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 10,
feature_theta = 0.8,
feature_number = 5,
dissimilar_ratio = 0.8)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
ggplot(aes(x = update_step,
y = kl,
color = complexity)) +
geom_line() +
facet_wrap(~feature_index)
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(complexity = "simple")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(complexity = "complex")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
ggplot(aes(x = update_step,
y = kl,
color = complexity)) +
geom_line() +
facet_wrap(~feature_index)
obs_1
length(obs_1)
obs_1_sequential_update
obs_1_sequential_update %>% distinct(update_number) %>% count()
obs_1_sequential_update %>% distinct(update_number)
?update_posterior_distribution
update_posterior_distribution
View(update_posterior_distribution)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 10,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 80,
dissimilar_ratio = 0.8)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 10,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 60,
dissimilar_ratio = 0.8)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 10,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 60,
dissimilar_ratio = 0.8)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 10,
dissimilar_ratio = 0.8)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 30,
dissimilar_ratio = 0.8)
obs_1<-generate_noisy_observations(
block = t_simple,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
grid_theta <- seq(0.1, 0.9, 0.2)
grid_epsilon <- seq(0.1, 0.9, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
# i should specify the trial number
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
git pull
library(here)
library(tidyverse)
MAIN_DATA_PATH <- here("main/cogsci_data/tidy_main.csv")
d <- read_csv(MAIN_DATA_PATH)
