c_a1b5_s <- get_surprise_for_creature_updates(observation = obs_2,
c_a1b5)%>%
mutate(complexity = "complex",
params = "a1b5")
s_a5b1_s <- get_surprise_for_creature_updates(observation = obs_1,
s_a5b1)%>%
mutate(complexity = "simple",
params = "a5b1")
c_a5b1_s <- get_surprise_for_creature_updates(observation = obs_2,
c_a5b1)%>%
mutate(complexity = "complex",
params = "a5b1")
s_all <- bind_rows(s_a1b1_s, c_a1b1_s,
s_a1b5_s, c_a1b5_s,
s_a5b1_s, c_a5b1_s)
s_all %>%
group_by(update_number, complexity, params) %>%
summarise(surprise_creature = sum(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
s_all %>%
group_by(update_number, complexity, params) %>%
summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
View(obs_1)
View(s_a1b1_surprise_test)
s_all %>%
filter(feature_index == 7) %>%
group_by(update_number, complexity, params) %>%
summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
s_all %>%
filter(feature_index < 10) %>%
group_by(update_number, complexity, params) %>%
summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_grid(feature_index~params)
s_all %>%
filter(feature_index < 10) %>%
group_by(update_number, complexity, params) %>%
#summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_grid(feature_index~params)
s_all %>%
filter(feature_index < 10) %>%
group_by(update_number, complexity, params) %>%
#summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise,
color = complexity)) +
geom_line() +
facet_grid(feature_index~params)
s_all %>%
#filter(feature_index < 10) %>%
group_by(update_number, complexity, params) %>%
summarise(surprise_creature = mean(surprise)) %>%
ggplot(aes(x = update_number,
y = surprise_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
kl_all %>%
group_by(trial_number, complexity, params) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_number,
y = kl_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
View(kl_all)
kl_all %>%
group_by(trial_num, complexity, params) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
s_a1b1 <- readRDS(here("adult_modeling/m_res/obs_1_sequential_update.rds"))
library(tidyverse)
library(here)
source(here("adult_modeling/scripts/get_entropy.R"))
source(here("adult_modeling/scripts/get_KL_measurement.R"))
source(here("adult_modeling/scripts/get_surprise.R"))
s_a1b1 <- readRDS(here("adult_modeling/m_res/obs_1_sequential_update.rds"))
c_a1b1 <- readRDS(here("adult_modeling/m_res/obs_2_sequential_update.rds"))
s_a1b5 <- readRDS(here("adult_modeling/m_res/obs_1_a1b5_sequential_update.rds"))
c_a1b5 <- readRDS(here("adult_modeling/m_res/obs_2_a1b5_sequential_update.rds"))
s_a5b1 <- readRDS(here("adult_modeling/m_res/obs_1_a5b1_sequential_update.rds"))
c_a5b1 <- readRDS(here("adult_modeling/m_res/obs_2_a5b1_sequential_update.rds"))
kl_s_a1b1 <- readRDS(here("adult_modeling/m_res/obs_1_sequential_update_kl.rds")) %>%
mutate(complexity = "simple",
params = "a1b1")
kl_c_a1b1 <- readRDS(here("adult_modeling/m_res/obs_2_sequential_update_kl.rds")) %>%
mutate(complexity = "complex",
params = "a1b1")
kl_s_a1b5 <- readRDS(here("adult_modeling/m_res/obs_1_a1b5_sequential_update_kl.rds")) %>%
mutate(complexity = "simple",
params = "a1b5")
kl_c_a1b5 <- readRDS(here("adult_modeling/m_res/obs_2_a1b5_sequential_update_kl.rds")) %>%
mutate(complexity = "complex",
params = "a1b5")
kl_s_a5b1 <- readRDS(here("adult_modeling/m_res/obs_1_a5b1_sequential_update_kl.rds")) %>%
mutate(complexity = "simple",
params = "a5b1")
kl_c_a5b1 <- readRDS(here("adult_modeling/m_res/obs_2_a5b1_sequential_update_kl.rds")) %>%
mutate(complexity = "complex",
params = "a5b1")#needs rerun
kl_all <- bind_rows(kl_s_a1b1,
kl_c_a1b1,
kl_s_a1b5,
kl_c_a1b5,
kl_s_a5b1,
kl_c_a5b1)
kl_all %>%
filter(complexity == "complex")
kl_all %>%
group_by(update_step, complexity, params) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
kl_all %>%
group_by(trial_num, complexity, params) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature,
color = complexity)) +
geom_line() +
facet_wrap(~params)
s_a1b1_e <- get_entropy_for_creature_udpates(s_a1b1) %>%
mutate(complexity = "simple",
params = "a1b1")
c_a1b1_e <- get_entropy_for_creature_udpates(c_a1b1) %>%
mutate(complexity = "complex",
params = "a1b1")
obs_1
obs_1
s_a1b1
c <- c(1,2, 3)
p <- c(0.1, 0.2, 0.3)
c * p
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/get_entropy.R', echo=TRUE)
obs_1
obs_1 %>% select(-c(trial_num, trial_observation_num))
library(tidyverse)
obs_1 %>% select(-c(trial_num, trial_observation_num))
obs_only <- obs_1 %>% %>% select(-c(trial_num, trial_observation_num))
obs_only <- obs_1 %>%select(-c(trial_num, trial_observation_num))
obs_only
map_df(obs_only, function(x){x-1})
map_df(obs_only, function(x){if_else(x == 1, 0, 1) })
obs_only
original_observation <- obs_1
flips_observation < original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_flipped_observation(obs_1)
obs_1
observations <- obs_1
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
alternative_posterior <- calculate_distribution(alternative_observations)
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
library(tidyverse)
library(matrixStats)
library(here)
obs_1
s_a1b1
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
posterior_df
s_a1b1
View(s_a1b1)
s_a1b1 %>% filter(update_number == 1)
obs
obs_1
alternative_observations
observations <- obs_1
alternative_observations
alternative_observations <- alternative_observations
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_observaion
all_alternative_observations
i = 1
all_alternative_observations[:3, ]
all_alternative_observations[1:3, ]
all_alternative_observations[1:1, ]
all_alternative_observations[1:0, ]
all_alternative_observations[1:0, ]
all_alternative_observations[0:0, ]
p1 <- observations[0:0,]
p1
alternative_observations[0:1, ]
p2 <- alternative_observations[0:1, ]
bind_rows(p2, p1)
p1 <- observations[0:3,]
p1 <- all_observaion[0:3,]
p2 <- all_alternative_observations[4,]
p2
bind_rows(p1, p2)
p1
p2
rbind(p1, p2)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/noisy_update.R', echo=TRUE)
obs_1
s_a1b1
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations，
obs_1
s_a1b1
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
update_alternative_posterior_distribution_ <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:i-1,],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
update_alternative_posterior_distribution <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:i-1,],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/noisy_update.R', echo=TRUE)
update_alternative_posterior_distribution <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:(i-1),],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
alternative_posterior
View(alternative_posterior)
posterior_df
dbeta(1, 1)
