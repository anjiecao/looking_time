ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line()
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs("each observation samples 3 feature")
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
NUM_FEATURE_SAMPLE_PER_OBSERVATION)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs("each observation samples 3 feature")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line()
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
NUM_FEATURE_SAMPLE_PER_OBSERVATION)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="each observation samples 3 feature")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line()
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
NUM_FEATURE_SAMPLE_PER_OBSERVATION)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="each observation samples 3 feature")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
# ugliest code chunk ever! yuk!
example_observation <- example_block_complex_similar
#example_observation <- lapply(example_block_complex_similar, make_observation,
#       NUM_FEATURE_SAMPLE_PER_OBSERVATION)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="no noisey sampling of features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
NUM_FEATURE_SAMPLE_PER_OBSERVATION)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="randomly sampling 3 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
5)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="randomly sampling 3 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
8)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="randomly sampling 3 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
example_block_complex_similar
sum(example_block_complex_similar[[1]])
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
9)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="randomly sampling 3 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
# ugliest code chunk ever! yuk!
#example_observation <- example_block_complex_similar
example_observation <- lapply(example_block_complex_similar, make_observation,
9)
update_prob_list <- list()
for (i in 1:length(example_observation)) {
current_observation = example_observation[[i]]
current_prior = filter(probability_df, prob_trials == i-1) %>% as.vector()
# loop through each observation feature vector
new_probability = c()
for (q in 2:length(current_prior)) {
feature_prior = current_prior[q]
if (current_observation[q-1] == 0){
current_feature_prob = 1 - feature_prior
}else if (current_observation[q-1] == 1){
current_feature_prob = feature_prior
}
new_probability = c(new_probability,
current_feature_prob)
}
update_prob_list[[i]] <- new_probability
}
updated_prob <- as.data.frame(do.call(rbind, update_prob_list)) %>%
unnest()
df.prob <- tibble("probability" = updated_prob %>%
as.matrix() %>%
Rfast::rowprods())
## multiply first then sum
df.prob %>%
mutate(trial_num = row_number(),
surprise = -log2(probability)) %>%
ggplot(aes(x = trial_num,
y = surprise)) +
geom_point() +
geom_line() +
labs(title ="randomly sampling 9 features")
## calculate feature-based suprirse then sum
updated_prob %>%
mutate(
across(
.fns = ~-log2(.))
) %>%
mutate(trial_num = row_number()) %>%
rowwise() %>%
mutate(
sum_surprise = sum(across(),
na.rm = TRUE)) %>%
ggplot(aes(x = trial_num,
y = sum_surprise)) +
geom_point() +
geom_line() +
labs("calculate feature-based surprise then sum together")
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
#pref_data <- read_csv(here('data/processed_data/trimmed_prefdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
scale_x_log10()
RT_data %>%
filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram()
RT_data %>%
# filter(trial_number == 1) %>%
ggplot(aes(x = rt)) +
geom_histogram() +
# scale_x_log10()
