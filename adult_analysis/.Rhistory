beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = all_observaion[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
View(obs_1_sequential_update)
library(tidyverse)
library(matrixStats)
library(here)
source(here("adult_modeling/scripts/grid_approximation.R"))
source(here("adult_modeling/scripts/noisy_update.R"))
source(here("adult_modeling/scripts/get_stimuli_and_observations.R"))
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
get_kl_for_creature <- function(distribution_df){
all_features <- distribution_df %>% distinct(feature_index) %>% pull()
all_feature_kl <- lapply(all_features,
function(x){
get_kl_for_feature(x,
distribution_df)
}) %>%
bind_rows()
return(all_feature_kl)
}
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
get_kl_for_creature <- function(distribution_df){
all_features <- distribution_df %>% distinct(feature_index) %>% pull()
all_feature_kl <- lapply(all_features,
function(x){
get_kl_for_feature(x,
distribution_df)
}) %>%
bind_rows()
return(all_feature_kl)
}
get_kl_for_feature <- function(feature,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(update_step = row_number() + 1,
feature_index = feature)
return(learning_updates)
}
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_1_sequential_update_kl
View(obs_1_sequential_update)
obs_1_sequential_update_kl %>% distinct(update_step)
all_updates
obs_1_sequential_update -> all_updates
all_updates
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
distribution_df = all_updates
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
total_update_number
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(update_step = row_number() + 1,
feature_index = feature)
feature = 1
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(update_step = row_number() + 1,
feature_index = feature)
learning_updates
distribution_df
distribution_df %>% select(update_number, trial_num, trial_observation_on_num)
distribution_df %>% select(update_number, trial_num, trial_observation_num)
distribution_df %>% select(update_number, trial_num, trial_observation_num) %>% distinct(update_number, trial_num, trial_observation_num)
distribution_df %>%
distinct(update_number, trial_num, trial_observation_num)
distribution_df %>%
distinct(update_number, trial_num, trial_observation_num) %>%
slice(2:)
slice
?slice
distribution_df %>%
distinct(update_number, trial_num, trial_observation_num) %>%
tail(-1)
learning_updates
index_track
index_track <- distribution_df %>%
distinct(update_number, trial_num, trial_observation_num) %>%
# because we won't be look at the first posterior
tail(-1)
index_track
get_kl_for_creature <- function(distribution_df){
all_features <- distribution_df %>% distinct(feature_index) %>% pull()
all_feature_kl <- lapply(all_features,
function(x){
get_kl_for_feature(x,
distribution_df)
}) %>%
bind_rows()
return(all_feature_kl)
}
get_kl_for_feature <- function(feature,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
index_track <- distribution_df %>%
distinct(update_number, trial_num, trial_observation_num) %>%
# because we won't be look at the first posterior
tail(-1)
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(update_step = row_number() + 1,
feature_index = feature)
learning_updates$trial_num <- index_track$trial_num
learning_updates$trial_observation_num <- index_track$trial_observation_num
return(learning_updates)
}
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
View(obs_1_sequential_update_kl)
obs_1_sequential_update_kl %>%
group_by(feature_index) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature,
color = complexity)) +
geom_line()
obs_1_sequential_update_kl %>%
group_by(feature_index) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature)) +
geom_line()
obs_1_sequential_update_kl %>%
group_by(feature_index) %>%
summarise(kl_creature = sum(kl))
obs_1_sequential_update_kl %>%
group_by(trial_num, feature_index) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature)) +
geom_line()
obs_1_sequential_update_kl %>%
group_by(trial_num, feature_index) %>%
summarise(kl_creature = sum(kl))
obs_1_sequential_update_kl %>%
group_by(trial_num, feature_index) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature)) +
geom_line() +
facet_wrap(~feature_index)
obs_1_sequential_update_kl %>%
group_by(trial_num) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature)) +
geom_line() +
facet_wrap(~feature_index)
obs_1_sequential_update_kl %>%
group_by(trial_num) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature)) +
geom_line()
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
# must satisfy: total feature > (1 + dissimilar ratio) * featureOnumber
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 3,
dissimilar_ratio = 0.2)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 80,
dissimilar_ratio = 0.2)
obs_1<-generate_noisy_observations(
block = t_simple,
exposure_type = "forced_short",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
b_1 <- make_creature(total_feature = 10,
feature_theta = 0.8,   # currently assuming all situations where there are features the theta are the same
feature_number= 5  #complexity controls for the proportion of the features
)
d_1 <- make_dissimilar_creature(creature = b_1,
dissimilar_ratio = .8)
# must satisfy: total feature > (1 + dissimilar ratio) * featureOnumber
t_simple <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 30,
dissimilar_ratio = 0.2)
t_complex <- generate_creature_sequence(
block_length = 8,
deviant_positions = c(3, 5),  # takes a vector,
total_feature = 100,
feature_theta = 0.8,
feature_number = 80,
dissimilar_ratio = 0.2)
obs_1<-generate_noisy_observations(
block = t_simple,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
obs_2<-generate_noisy_observations(
block = t_complex,
exposure_type = "self_paced",
short_exposure_samps = 1,
long_exposure_samps = 10,
normal_exposure_samps = 10,
epsilon = 0.02)
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 1
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
obs_1_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_1,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_1_sequential_update_kl <- get_kl_for_creature(obs_1_sequential_update)
obs_2_sequential_update <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = obs_2,
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 1,
beta_epsilon = 10
)
obs_2_sequential_update_kl <- get_kl_for_creature(obs_2_sequential_update)
obs_1_sequential_update_kl <- obs_1_sequential_update_kl %>%
mutate(complexity = "simple")
obs_2_sequential_update_kl <- obs_2_sequential_update_kl %>%
mutate(complexity = "complex")
obs <- bind_rows(obs_1_sequential_update_kl,
obs_2_sequential_update_kl)
obs %>%
group_by(update_step, complexity) %>%
filter(update_step < 11) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
ggplot(aes(x = update_step,
y = kl,
color = complexity)) +
geom_line() +
facet_wrap(~feature_index)
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(trial_num, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line()
obs %>%
group_by(trial_num, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature,
color = complexity)) +
geom_line()
obs %>%
group_by(update_step, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = update_step,
y = kl_creature,
color = complexity)) +
geom_line() #+
#facet_wrap(~feature_index)
obs %>%
group_by(trial_num, complexity) %>%
summarise(kl_creature = sum(kl)) %>%
ggplot(aes(x = trial_num,
y = kl_creature,
color = complexity)) +
geom_line()
?save
save(obs_1_sequential_update, "obs_1_sequential_update.RData")
saveRDS(obs_1_sequential_update,
file = here("obs_1_sequential_update.RData"))
saveRDS(obs_1_sequential_update,
file = here("adult_modeling/obs_1_sequential_update.rds"))
saveRDS(obs_2_sequential_update,
file = here("adult_modeling/obs_2_sequential_update.rds"))
obs_1_sequential_update
obs_2_sequential_update
saveRDS(obs_1_sequential_update,
file = here("adult_modeling/obs_1_sequential_update.rds"))
saveRDS(obs_1_sequential_update,
file = here("adult_modeling/obs_1_sequential_update.rds"))
saveRDS(obs_2_sequential_update,
file = here("adult_modeling/obs_2_sequential_update.rds"))
aveRDS(obs_1_sequential_update_kl,
file = here("adult_modeling/obs_1_sequential_update_kl.rds"))
saveRDS(obs_1_sequential_update,
file = here("adult_modeling/obs_1_sequential_update.rds"))
saveRDS(obs_2_sequential_update,
file = here("adult_modeling/obs_2_sequential_update.rds"))
saveRDS(obs_1_sequential_update_kl,
file = here("adult_modeling/obs_1_sequential_update_kl.rds"))
saveRDS(obs_2_sequential_update,
file = here("adult_modeling/obs_2_sequential_update_kl.rds"))
