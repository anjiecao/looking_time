second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- -matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(udpate_step = row_number() + 1)
return(learning_updates)
}
kl_df <- get_kl_for_feature(feature = 1,
distribution_df = all_updates)
kl_df %>%
ggplot(aes(x = udpate_step, y = kl),
) +
geom_line()
get_kl_for_feature <- function(feature = 1,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(udpate_step = row_number() + 1)
return(learning_updates)
}
kl_df <- get_kl_for_feature(feature = 1,
distribution_df = all_updates)
kl_df %>%
ggplot(aes(x = udpate_step, y = kl),
) +
geom_line()
get_kl_for_feature <- function(feature = 1,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
# wrong math but apprently give you a right curve???!?what the heck??
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(udpate_step = row_number() + 1)
return(learning_updates)
}
kl_df <- get_kl_for_feature(feature = 1,
distribution_df = all_updates)
get_kl_for_feature <- function(feature = 3,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
# wrong math but apprently give you a right curve???!?what the heck??
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(udpate_step = row_number() + 1)
return(learning_updates)
}
kl_df <- get_kl_for_feature(feature = 1,
distribution_df = all_updates)
kl_df %>%
ggplot(aes(x = udpate_step, y = kl),
) +
geom_line()
get_kl_for_feature <- function(feature = 3,
distribution_df = all_updates){
total_update_number <- length(distribution_df %>%
distinct(update_number) %>%
pull())
all_learning_step_updates <- c()
for(update_i in 2:total_update_number){
first_update_index <- update_i - 1
second_update_index <- update_i
distribtuion_for_feature <- distribution_df %>%
filter(feature_index == feature)
second_update <- distribtuion_for_feature %>%
filter(update_number == second_update_index)
first_update <- distribtuion_for_feature %>%
filter(update_number == first_update_index)
all_thetas <- all_updates %>% distinct(theta) %>% pull()
kl <- c()
for(t in all_thetas){
second_update_posterior <- second_update %>%
filter(theta == t) %>%
pull(log_posterior)
first_update_posterior <- first_update %>%
filter(theta == t)%>%
pull(log_posterior)
# because everything is in log
kl_for_t <- second_update_posterior + second_update_posterior - first_update_posterior
kl <- c(kl, kl_for_t)
}
# wrong math but apprently give you a right curve???!?what the heck??
current_step_kl <- matrixStats::logSumExp(kl)
all_learning_step_updates <- c(all_learning_step_updates,
current_step_kl)
}
learning_updates <- tibble("kl" = all_learning_step_updates) %>%
mutate(udpate_step = row_number() + 1)
return(learning_updates)
}
kl_df <- get_kl_for_feature(feature = 3,
distribution_df = all_updates)
kl_df %>%
ggplot(aes(x = udpate_step, y = kl),
) +
geom_line()
kl_df %>%
ggplot(aes(x = udpate_step, y = kl),
) +
geom_line()
test_creature_background_theta <- c(0.01, 0.01, 0.01, 0.99, 0.99, 0.8)
test_creature_deviant_theta <- c(0.2, 0.8, 0.8, 0.2, 0.2, 0.9)
#test creature
# these will be a block [y_1, y_2, y_3, y_4, z_1, y_5]
y_1 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_2 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_3 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
y_4 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
z_1 <-  sapply(test_creature_deviant_theta, function(x){rbernoulli(p = x, n = 1)})
#y_5 <- sapply(test_creature_background_theta, function(x){rbernoulli(p = x, n = 1)})
# in each trial collects like 100 times
y_1_noisy_observation <- rbind(noisy_observation_creature(y_1, 20, 0.02))
y_2_noisy_observation <- rbind(noisy_observation_creature(y_2, 20, 0.02))
y_3_noisy_observation <-  rbind(noisy_observation_creature(y_3, 20, 0.02))
y_4_noisy_observation <-  rbind(noisy_observation_creature(y_4, 30, 0.2))
z_1_noisy_observation <-  rbind(noisy_observation_creature(z_1, 30, 0.2))
grid_theta <- seq(0.01, 0.99, 0.05)
grid_epsilon <- seq(0.01, 0.99, 0.05)
three_observations <- rbind(y_1_noisy_observation,
y_2_noisy_observation,
y_3_noisy_observation)
updates = nrow(three_observations)
# let's just look at 10 updates first
# or big_data <- dplyr::bind_rows(datalist)
datalist = list()
for (i in seq(1, 10, 1)){
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon_initial(
grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = three_observations[1:i, ],
alpha_prior = 1,
beta_prior = 1,
alpha_epsilon = 10,
beta_epsilon = 1
) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
y_1
y_2
y_3
all_updates %>%
ggplot(aes(x = theta, y = exp(log_posterior), color = update_number)) +
geom_point()+
facet_wrap(~feature_index)
View(post_first_update_theta_epsilon_approx)
z_bar <- y_1_noisy_observation
z_bar <- y_1_noisy_observation[1, ]
z_bar
z_bar <- y_1_noisy_observation[,1]
z_bar
x = 0.2
alpha_theta <- 1
beta_theta <- 1
epsilon <- 0.2
alpha_epsilon <- 10
beta_epsilon <- 1
theta_only <- first_update_grid_approximate_with_theta(z_bar = z_bar,
epsilon = epsilon, alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = epsilon)
theta_only
View(theta_only)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon
View(theta_and_epsilon)
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
ggplot(aes(x = theta, y = log_posterior)) +
geom_point()
z_bar
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
ggplot(aes(x = theta, y = log_posterior)) +
geom_point()
first_update_grid_approximate_with_theta_and_epsilon <- function(
feature_index,
grid_theta = seq(0.01, .99, .01),
grid_epsilon = seq(0.01, .99, .01),
z_bar,
alpha_theta,
beta_theta,
alpha_epsilon,
beta_epsilon
){
samps <- expand_grid(theta = grid_theta,
epsilon = grid_epsilon)
samps$unnormalized_log_posterior <- mapply(function(x, y)
lp_theta_given_z(z_bar = z_bar,
theta = x,
epsilon = y,
alpha_theta = alpha_theta,
beta_theta = beta_theta,
alpha_epsilon = alpha_epsilon,
beta_epsilon = beta_epsilon),
samps$theta,
samps$epsilon)
samps$normalized_log_posterior <- samps$unnormalized_log_posterior -
matrixStats::logSumExp(samps$unnormalized_log_posterior)
# samps <- samps %>%
#   group_by(theta) %>%
#   summarise(
#     unnormalized_log_posterior = matrixStats::logSumExp(unnormalized_log_posterior) +
#       log(1/length(unnormalized_log_posterior)),
#     log_posterior = matrixStats::logSumExp(normalized_log_posterior) +
#               log(1/length(normalized_log_posterior))
#     )
samps$feature_index <- feature_index
return(samps)
}
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon %>%
ggplot(aes(x = theta, y = log_posterior)) +
geom_point()
View(theta_and_epsilon)
theta_and_epsilon %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .2) %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .2) %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .1) %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .01) %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
z_bar
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .01) %>%
ggplot(aes(x = theta, y = exp(normalized_log_posterior))) +
geom_point()
z_bar
theta_only %>%
ggplot(aes(x = theta, y = normalized_log_posterior)) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .1) %>%
ggplot(aes(x = theta, y = exp(normalized_log_posterior))) +
geom_point()
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1
z_bar = z_bar,
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon %>%
filter(epsilon == .1) %>%
ggplot(aes(x = theta, y = exp(normalized_log_posterior))) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .2) %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .99) %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .97) %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
theta_and_epsilon %>%
filter(epsilon == .97) %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
View(theta_and_epsilon)
theta_and_epsilon %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
theta_only %>%
ggplot(aes(x = theta, y = exp(normalized_log_posterior))) +
geom_point()
theta_and_epsilon %>%
ggplot(aes(x = theta, y = exp(log_posterior))) +
geom_point()
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
View(theta_and_epsilon)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
View(theta_and_epsilon)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/grid_approximation.R', echo=TRUE)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon
theta_and_epsilon %>%
group_by(theta) %>%
summarise(
#     #unnormalized_log_posterior = matrixStats::logSumExp(unnormalized_log_posterior) +
#     #     log(1/length(unnormalized_log_posterior)),
log_posterior = matrixStats::logSumExp(normalized_log_posterior) +
log(1/length(normalized_log_posterior))
#
#     #unnormalized_log_posterior = matrixStats::logSumExp(unnormalized_log_posterior) +
#    #   log(1/length(unnormalized_log_posterior)),
#    # log_posterior = matrixStats::logSumExp(normalized_log_posterior) +
#     #          log(1/length(normalized_log_posterior))
)
theta_only
theta_only <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
thetas = seq(0.01, .99, .02),
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
thetas = seq(0.01, .99, .02),                                                                                 z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only <- first_update_grid_approximate_with_theta(feature_index = 1,
thetas = seq(0.01, .99, .02),                                                                                 z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only <- first_update_grid_approximate_with_theta(feature_index = 1,
thetas = seq(0.01, .99, .02),                                                                                 z_bar = z_bar,
epsilon = .2,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only
View(theta_and_epsilon)
theta_only
theta_and_epsilon %>%
filter(theta = .02)
theta_only
theta_and_epsilon %>%
filter(theta == .02)
theta_only
theta_and_epsilon %>%
filter(theta == .03)
theta_only
theta_and_epsilon %>%
filter(epsilon == .03)
theta_only
theta_and_epsilon %>%
filter(epsilon == .02)
theta_only
theta_and_epsilon %>%
filter(epsilon == ..2)
theta_only
theta_and_epsilon %>%
filter(epsilon == .2)
theta_only <- first_update_grid_approximate_with_theta(feature_index = 1,
thetas = seq(0.01, .99, .02),                                                                                 z_bar = z_bar,
epsilon = .3,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only
theta_and_epsilon %>%
filter(epsilon == .3)
View(theta_and_epsilon)
View(theta_and_epsilon)
theta_only <- first_update_grid_approximate_with_theta(feature_index = 1,
thetas = seq(0.01, .99, .02),                                                                                 z_bar = z_bar,
epsilon = .01,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_and_epsilon <- first_update_grid_approximate_with_theta_and_epsilon(feature_index = 1,
z_bar = z_bar,
alpha_theta = alpha_theta, beta_theta = beta_theta, alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon)
theta_only
theta_and_epsilon %>%
filter(epsilon == .3)
theta_only
theta_and_epsilon %>%
filter(epsilon == .01)
theta_only
theta_and_epsilon %>%
group_by(theta) %>%
summarise(
normalized_log_posterior = unnormalized_log_posterior - logSumExp(unnormalized_log_posterior)
)
theta_only
theta_and_epsilon %>%
group_by(theta) %>%
summarise(
normalized_log_posterior = unnormalized_log_posterior - logSumExp(unnormalized_log_posterior),
log_posterior = matrixStats::logSumExp(normalized_log_posterior) +
log(1/length(normalized_log_posterior))
)
