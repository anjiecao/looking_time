filter(exposure_type == "self_paced" | exposure_type == "old_self_paced") %>%
filter(trial_number == 1) %>%
ggplot(aes(x = block_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Block") +
ylab("Looking time at first self-paced trial") +
facet_wrap(~exposure_type)
d %>%
#filter(exposure_type == "self_paced" | exposure_type == "old_self_paced") %>%
filter(trial_number == 1) %>%
ggplot(aes(x = block_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Block") +
ylab("Looking time at first self-paced trial") +
facet_wrap(~exposure_type)
d %>%
filter(exposure_type == "self_paced" | exposure_type == "old_self_paced") %>%
filter(trial_number == 1) %>%
ggplot(aes(x = block_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Block") +
ylab("Looking time at first self-paced trial") +
#facet_wrap(~exposure_type)
d %>%
filter(exposure_type == "self_paced" | exposure_type == "old_self_paced") %>%
filter(trial_number == 1) %>%
ggplot(aes(x = block_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Block") +
ylab("Looking time at first self-paced trial")
#facet_wrap(~exposure_type)
forced_long_first_subject <- d %>%
filter(block_number == 0 & exposure_type == "forced_long") %>%
distinct(subject) %>%
pull()
self_paced_first_subject <- d %>%
filter(block_number == 0 & exposure_type == "self_paced") %>%
distinct(subject) %>%
pull()
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
ggplot(aes(x = trial_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("Looking time at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
ggplot(aes(x = trial_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("Looking time at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
ggplot(aes(x = trial_number,
y = rt,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("RT at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
ggplot(aes(x = trial_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("Looking time at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
filter(trial_type == "background") %>%
ggplot(aes(x = trial_number,
y = rt,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("RT at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
filter(trial_type == "background") %>%
ggplot(aes(x = trial_number,
y = looking_time,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("Looking time at first block")
d %>%
filter((version == "new" & block_number == 0 & exposure_type == "self_paced") |
(version == "old" & block_number == 0 )) %>%
filter(trial_type == "background") %>%
ggplot(aes(x = trial_number,
y = rt,
color = version)) +
stat_summary(position = position_dodge(width = 0.1))  +
stat_summary(geom = "line") +
xlab("Trial") +
ylab("RT at first block")
v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * version +
(1 | subject),
data = d)
no_v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity +
(1 | subject),
data = d)
anova(v_fit, no_v_fit)
v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * version +
(1 | subject),
data = d)
v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * version +
(1 | subject),
data = d)
v_fit %>% summary()
v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * version +
(1 | subject),
data = d)
summary(v_fit)$coef %>% knitr::kable(digits = 2)```
v_fit <- lmer(log(rt) ~ I((exp(1)**(-trial_number))) * item_type * trial_complexity * version +
(1 | subject),
data = d)
summary(v_fit)$coef %>% knitr::kable(digits = 2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
signal_for_c
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
signal_for_c
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
signal_for_c
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
signal_for_c
?dnorm
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(unknown_true_value_for_c, fp_amount_of_noise)
plot(signal_for_c)
unknown_true_value_for_c = 1
fp_amount_of_noise = .2
signal_for_c = dnorm(seq(1, 10, 1), unknown_true_value_for_c, fp_amount_of_noise)
plot(signal_for_c)
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = dnorm(seq(-10, 10, 0.1),
unknown_true_value_for_c, fp_amount_of_noise)
plot(signal_for_c)
?rnorm
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = rnorm(50,
unknown_true_value_for_c,
fp_amount_of_noise)
plot(signal_for_c)
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = rnorm(50,
unknown_true_value_for_c,
fp_amount_of_noise)
hist(signal_for_c)
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = rnorm(100,
unknown_true_value_for_c,
fp_amount_of_noise)
hist(signal_for_c)
pw
pwr
unknown_true_value_for_c = 0
fp_amount_of_noise = 1
signal_for_c = rnorm(100,
unknown_true_value_for_c,
fp_amount_of_noise ^ 2)
hist(signal_for_c)
?sample
percision_at_time_t0 = 0.2
utility_at_t0 = .1
precision_at_t1 = percision_at_time_t0 + fp_amount_of_noise ^ (-2)
utilitiy_at_t1 = (fp_amount_of_noise ^ (-2) * sample(signal_for_c, 1) + percision_at_time_t0 * utility_at_t0) / precision_at_t1
precision_at_t1
utilitiy_at_t1
initial_belief_mean_item_value <- 1
initial_precision <- .2
# pretend to have 100 time points
for (i in 1:100){
print(i)
}
initial_belief_mean_item_value <- 1
initial_belief_variance <- .2
prior_distribution <- rnorm(100,
mean = initial_belief_mean_item_value,
sd = initial_belief_variance^2)
initial_utility <- initial_belief_mean_item_value
initial_precision <- initial_belief_variance ^ (-2)
# pretend to have 100 time points
precision_vector <- c(initial_precision)
utility_vector <- c(initial_utility)
utility_vector
utility_vector[1]
utility_vector[0]
initial_belief_mean_item_value <- 1
initial_belief_variance <- .2
noise_in_signal <- initial_belief_variance ^ 2
prior_distribution <- rnorm(100,
mean = initial_belief_mean_item_value,
sd = noise_in_signal)
initial_utility <- initial_belief_mean_item_value
initial_precision <- initial_belief_variance ^ (-2)
# pretend to have 100 time points
precision_vector <- c(initial_precision)
utility_vector <- c(initial_utility)
for (i in 1:100){
previous_timepoint_precision = precision_vector[i]
noise_in_signal = noise_in_signal
current_timepoint_precision = update_precision(previous_timepoint_precision,
noise_in_signal)
precision_vector <- c(precision_vector, current_timepoint_precision)
}
update_precision <- function(previous_timepoint_precision,
noise_in_signal){
current_precision <- previous_timepoint_precision + noise_in_signal
return (current_precision)
}
update_mean_item_value <- function(signal_noise, signal_distribution,
previous_timepoint_precision,
previous_timepoint_mean_item_value,
current_precision){
current_mean_value <- ((signal_noise ^ (-2) * sample(signal_distribution, 1) +
previous_timepoint_precision * previous_timepoint_mean_item_value)) / current_precision
return (current_mean_value)
}
initial_belief_mean_item_value <- 1
initial_belief_variance <- .2
noise_in_signal <- initial_belief_variance ^ 2
prior_distribution <- rnorm(100,
mean = initial_belief_mean_item_value,
sd = noise_in_signal)
initial_utility <- initial_belief_mean_item_value
initial_precision <- initial_belief_variance ^ (-2)
# pretend to have 100 time points
precision_vector <- c(initial_precision)
utility_vector <- c(initial_utility)
for (i in 1:100){
previous_timepoint_precision = precision_vector[i]
noise_in_signal = noise_in_signal
current_timepoint_precision = update_precision(previous_timepoint_precision,
noise_in_signal)
precision_vector <- c(precision_vector, current_timepoint_precision)
}
precision_vector
initial_belief_mean_item_value <- 1
initial_belief_variance <- .2
noise_in_signal <- initial_belief_variance ^ 2
prior_distribution <- rnorm(100,
mean = initial_belief_mean_item_value,
sd = noise_in_signal)
initial_utility <- initial_belief_mean_item_value
initial_precision <- initial_belief_variance ^ (-2)
# pretend to have 100 time points
precision_vector <- c(initial_precision)
utility_vector <- c(initial_utility)
for (i in 1:100){
previous_timepoint_precision = precision_vector[i]
noise_in_signal = noise_in_signal
current_timepoint_precision = update_precision(previous_timepoint_precision,
noise_in_signal)
precision_vector <- c(precision_vector, current_timepoint_precision)
previous_timepoint_utility = utility_vector[i]
previous_time_point_distribution = rnorm(100,
mean = previous_timepoint_utility,
sd = noise_in_signal)
current_timepoint_utility = update_mean_item_value(noise_in_signal,
previous_time_point_distribution,
previous_timepoint_precision,
previous_timepoint_utility,
current_timepoint_precision)
utility_vector <- c(utility_vector, current_timepoint_utility)
}
utility_vector
initial_belief_mean_item_value <- 1
initial_belief_variance <- .2
noise_in_signal <- initial_belief_variance ^ 2
prior_distribution <- rnorm(100,
mean = initial_belief_mean_item_value,
sd = noise_in_signal)
initial_utility <- initial_belief_mean_item_value
initial_precision <- initial_belief_variance ^ (-2)
# pretend to have 100 time points
precision_vector <- c(initial_precision)
utility_vector <- c(initial_utility)
for (i in 1:100){
previous_timepoint_precision = precision_vector[i]
noise_in_signal = noise_in_signal
current_timepoint_precision = update_precision(previous_timepoint_precision,
noise_in_signal)
precision_vector <- c(precision_vector, current_timepoint_precision)
previous_timepoint_utility = utility_vector[i]
previous_time_point_distribution = rnorm(100,
mean = previous_timepoint_utility,
sd = noise_in_signal)
current_timepoint_utility = update_mean_item_value(noise_in_signal,
previous_time_point_distribution,
previous_timepoint_precision,
previous_timepoint_utility,
current_timepoint_precision)
utility_vector <- c(utility_vector, current_timepoint_utility)
}
utility_vector
new <- RT_data %>%
mutate(looking_time = case_when(
exposure_type == "forced_short" & trial_number == 1 ~ 50,
exposure_type == "forced_long" & trial_number == 1 ~ 5000,
TRUE ~ 500 + rt
)) %>%
mutate(version = "new")
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data_new <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
demog_data_old <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
new <- RT_data %>%
mutate(looking_time = case_when(
exposure_type == "forced_short" & trial_number == 1 ~ 50,
exposure_type == "forced_long" & trial_number == 1 ~ 5000,
TRUE ~ 500 + rt
)) %>%
mutate(version = "new")
old <- read_csv(here('data/processed_data/sample_1/trimmed_RTdata.csv')) %>%
mutate(version = "old",
exposure_type = "old_self_paced") %>%
mutate(looking_time = 500 + rt)
# i believe the old version was not processed this way
flat_rt_sbj <- old %>%
group_by(subject) %>%
summarise(sd = sd(log(rt))) %>%
filter(sd < 0.15) %>%
pull(subject)
old <- old %>%
filter(!(subject %in% exlude_participant))
new <- RT_data %>%
mutate(looking_time = case_when(
exposure_type == "forced_short" & trial_number == 1 ~ 50,
exposure_type == "forced_long" & trial_number == 1 ~ 5000,
TRUE ~ 500 + rt
)) %>%
mutate(version = "new")
old <- read_csv(here('data/processed_data/sample_1/trimmed_RTdata.csv')) %>%
mutate(version = "old",
exposure_type = "old_self_paced") %>%
mutate(looking_time = 500 + rt)
# i believe the old version was not processed this way
flat_rt_sbj <- old %>%
group_by(subject) %>%
summarise(sd = sd(log(rt))) %>%
filter(sd < 0.15) %>%
pull(subject)
old <- old %>%
filter(!(subject %in% flat_rt_sbj))
d <- bind_rows(new, old)
d %>%
group_by(version, subject) %>%
summarise(
mean_lt = mean(looking_time),
mean_rt = mean(rt)) %>%
pivot_longer(
cols = c(mean_lt,mean_rt),
names_to = "measurement_type",
values_to = "duration"
) %>%
ggplot(aes(x = duration, fill = version)) +
geom_density(alpha = .5) +
#scale_x_log10()+
facet_wrap(~measurement_type)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data_new <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
demog_data_old <- read_csv(here('data/processed_data/sample_1/trimmed_demogdata.csv'))
demog_data_new <- demog_data_new %>%
mutate(version = "new")
demog_data_old <- demog_data_old %>%
mutate(version = "old")
bind_rows(demog_data_new, demog_data_old)
demog_data_new <- demog_data_new %>%
mutate(version = "new",
age = as.double(age))
demog_data_old <- demog_data_old %>%
mutate(version = "old",
age = as.double(age))
bind_rows(demog_data_new, demog_data_old)
demog_data_new <- demog_data_new %>%
mutate(version = "new",
age = as.double(age))
demog_data_old <- demog_data_old %>%
mutate(version = "old",
age = as.double(age))
demog_data_full <- bind_rows(demog_data_new, demog_data_old)
demog_data_full %>%
ggplot(aes(x = age, fill = version)) +
geom_density(alpha = .5)
View(demog_data_full)
demog_data_full %>%
ggplot(aes(x = ethnicity, fill = version)) +
geom_density(alpha = .5)
demog_data_full %>%
ggplot(aes(x = ethnicity, fill = version)) +
geom_histogram(alpha = .5)
demog_data_full %>%
ggplot(aes(x = ethnicity, fill = version)) +
geom_histogram(stat = "count")
demog_data_full %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
facet_wrap(fill = version)
demog_data_full %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
facet_wrap(~version)
demog_data_full %>%
ggplot(aes(x = ethnicity)) +
geom_histogram(stat = "count") +
facet_wrap(~version) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data_full %>%
ggplot(aes(x = education)) +
geom_histogram(stat = "count") +
facet_wrap(~version) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
demog_data_full %>%
ggplot(aes(x = gender)) +
geom_histogram(stat = "count") +
facet_wrap(~version) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(lme4)
library(here)
library(tidyverse)
library(stringr) # for parsing r string
library(jsonlite) # for parsing r string
library(ggiraphExtra)
library(plotrix)
library(lmerTest)
RT_data <- read_csv(here('data/processed_data/trimmed_RTdata.csv'))
similarity_data <- read_csv(here('data/processed_data/trimmed_similaritydata.csv'))
complexity_data <- read_csv(here('data/processed_data/trimmed_complexitydata.csv'))
demog_data <- read_csv(here('data/processed_data/trimmed_demogdata.csv'))
RT_data <- RT_data %>%
mutate(looking_time = case_when(
exposure_type == "forced_short" & trial_number == 1 ~ 50,
exposure_type == "forced_long" & trial_number == 1 ~ 5000,
TRUE ~ 500 + rt
))
feedback <- read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(stimulus_type == "feedback") %>%
select(subject, responses) %>%
toJSON() %>%
fromJSON() %>%
mutate(
feedback = map(responses, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(feedback) %>%
select(subject, Q0)
feedback %>% kableExtra::kable()
RT_data %>%
filter(subject == "SS1618438527994")
read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(subject == "SS1618438527994")
read_csv(here('data/merged_data/merged_data.csv')) %>%
filter(subject == "SS1618438527994") %>%
select(stimulus_displayed) %>%
distinct()
