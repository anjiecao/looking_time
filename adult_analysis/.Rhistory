get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
posterior_df
s_a1b1
View(s_a1b1)
s_a1b1 %>% filter(update_number == 1)
obs
obs_1
alternative_observations
observations <- obs_1
alternative_observations
alternative_observations <- alternative_observations
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_observaion
all_alternative_observations
i = 1
all_alternative_observations[:3, ]
all_alternative_observations[1:3, ]
all_alternative_observations[1:1, ]
all_alternative_observations[1:0, ]
all_alternative_observations[1:0, ]
all_alternative_observations[0:0, ]
p1 <- observations[0:0,]
p1
alternative_observations[0:1, ]
p2 <- alternative_observations[0:1, ]
bind_rows(p2, p1)
p1 <- observations[0:3,]
p1 <- all_observaion[0:3,]
p2 <- all_alternative_observations[4,]
p2
bind_rows(p1, p2)
p1
p2
rbind(p1, p2)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/noisy_update.R', echo=TRUE)
obs_1
s_a1b1
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observationsï¼Œ
obs_1
s_a1b1
get_flipped_observation <- function(original_observation){
flip_observation <- original_observation %>%
select(-c(trial_num, trial_observation_num)) %>%
map_df(., function(x){if_else(x == 1, 0, 1) })
flip_observation$trial_num <- original_observation$trial_num
flip_observation$trial_observation_num <- original_observation$trial_observation_num
return (flip_observation)
}
get_eig_entropy <- function(observations,
posterior_df){
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
update_alternative_posterior_distribution_ <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:i-1,],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
update_alternative_posterior_distribution <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:i-1,],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
source('~/Desktop/projects/looking_time/adult_analysis/adult_modeling/scripts/noisy_update.R', echo=TRUE)
update_alternative_posterior_distribution <- function(grid_theta,
grid_epsilon,
observations,
alternative_observations,
alpha_prior,
beta_prior,
alpha_epsilon,
beta_epsilon){
all_observaion <- observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
all_alternative_observations <- alternative_observations %>%
select(-c(trial_num, trial_observation_num)) %>%
as.matrix()
trial_num <- observations$trial_num
trial_observation_num <- observations$trial_observation_num
updates = nrow(all_observaion)
datalist = list()
for (i in seq(1, updates, 1)){
alternative_obs_for_update <- rbind(all_observaion[0:(i-1),],
all_alternative_observations[i,])
post_first_update_theta_epsilon_approx <- grid_approximate_creature_with_theta_and_epsilon(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
noisy_creature_observation = alternative_obs_for_update[1:i, ],
alpha_prior = alpha_prior,
beta_prior= beta_prior,
alpha_epsilon = alpha_epsilon, beta_epsilon = beta_epsilon) %>%
mutate(update_number = i)
datalist[[i]] <-  post_first_update_theta_epsilon_approx
}
all_updates <- dplyr::bind_rows(datalist)
all_updates <- all_updates %>% left_join(tibble(update_number = all_updates %>%
distinct(update_number) %>% pull(),
trial_num = trial_num,
trial_observation_num = trial_observation_num),
by = "update_number")
return(all_updates)
}
alternative_observations <- get_flipped_observation(observations) # if actually observe 0101, flip 1010
grid_theta <- seq(0.1, 1, 0.2)
grid_epsilon <- seq(0.1, 1, 0.2)
alpha_prior = 5
beta_prior = 1
alpha_epsilon = 1
beta_epsilon = 10
alternative_posterior <- update_alternative_posterior_distribution(grid_theta = grid_theta,
grid_epsilon = grid_epsilon,
observations = observations,
alternative_observations = alternative_observations,
alpha_prior = alpha_prior,
beta_prior = beta_prior ,
alpha_epsilon = 1,
beta_epsilon = 10
)
alternative_posterior
View(alternative_posterior)
posterior_df
dbeta(1, 1)
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
theoretical_mod <- rma.mv(d_calc ~ sentence_structure + agent_argument_type + mean_age_months, V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
library(papaja)
library(rmarkdown)
library(tidyverse)
library(here)
library(glue)
library(metafor)
library(knitr)
library(PublicationBias)
library(janitor)
library(insight)
library(patchwork)
library(metalabr)
library(pwr)
# scripts for data presentation
source(here("writeups/paper/scripts/prisma_diagram.R"))
source(here("writeups/paper/scripts/model_print.R"))
source(here("writeups/paper/scripts/forest_plot_helper.R"))
source(here("writeups/paper/scripts/funnel_plot_helper.R"))
source(here("writeups/paper/scripts/predictor_plot_helper.R"))
source(here("writeups/paper/scripts/metalab_plot_helper.R"))
knitr::opts_chunk$set(warning = FALSE,
message = FALSE,
cache = FALSE,
echo = FALSE
)
knitr::opts_chunk$set(dev = 'pdf')
theme_set(theme_classic(base_size = 11))
alpha <- .05
CRIT_95 <- 1.96
CRIT_99 <- 2.58
DATA_PATH <- here("data/processed/syntactic_bootstrapping_tidy_data.csv")
RAW_DATA_PATH <- here("data/raw/syntactic_bootstrapping_raw_data.csv")
ma_data <- read_csv(DATA_PATH)
theoretical_mod <- rma.mv(d_calc ~ sentence_structure + agent_argument_type + mean_age_months, V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
theoretical_mod_print <- generate_mega_model_df(theoretical_mod)
methodological_mod <- rma.mv(d_calc ~ character_identification + practice_phase + presentation_type + test_mass_or_distributed + n_repetitions_sentence,
V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
methodological_mod_print <- generate_mega_model_df(methodological_mod)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical") +
theme(legend.position = "none") +
ggtitle("Theoretical Moderators") +
plot_annotation(tag_levels = 'a')
# MODERATORS <- c( "NULL", "mean_age_months","productive_vocab_median", "sentence_structure", "agent_argument_type", "patient_argument_type", "n_repetitions_sentence", "n_repetitions_video", "stimuli_modality", "stimuli_actor", "transitive_event_type","intransitive_event_type", "visual_stimuli_pair", "test_method","presentation_type","character_identification", "practice_phase", "test_mass_or_distributed", "n_train_test_pair", "n_test_trial_per_pair" )
MODERATORS <- c( "NULL", "mean_age_months","productive_vocab_median", "sentence_structure", "agent_argument_type", "patient_argument_type", "n_repetitions_sentence", "stimuli_modality", "stimuli_actor",  "presentation_type","character_identification", "practice_phase", "test_mass_or_distributed", "n_train_test_pair", "n_test_trial_per_pair" )
mod_print <- generate_moderator_df(MODERATORS, ma_data)
generate_forest_plot(ma_data)
unique_infants <- ma_data %>%
summarize(sum_infants = sum(n_1))  %>%
pull(sum_infants)
mean_age_day <- ma_data %>%
filter(!is.na(mean_age)) %>%
summarize(mean_age =  format(round(mean(mean_age), 2))) %>%
pull(mean_age)
SD_age_day <- ma_data %>%
filter(!is.na(mean_age)) %>%
summarize(sd_age =  format(round(sd(mean_age), 2))) %>%
pull(sd_age)
min_age_day <- ma_data %>%
filter(!is.na(mean_age)) %>%
summarize(min_age_day =  (round(min(mean_age), 2))) %>%
pull(min_age_day)
max_age_day <- ma_data %>%
filter(!is.na(mean_age)) %>%
summarize(max_age_day =  (round(max(mean_age), 2))) %>%
pull(max_age_day)
mean_age_months <- floor(as.numeric(mean_age_day) / 30.44)
mean_age_remaining_day <- round((as.numeric(mean_age_day) - mean_age_months * 30.44),0)
min_age_months <- round((as.numeric(min_age_day) / 30.44), 1)
max_age_months <- round((as.numeric(max_age_day) / 30.44), 1)
sample_size <- ma_data %>%
summarize(mean_ss = mean(n_1),
sd_ss = sd(n_1))
generate_funnel_plot(ma_data)
reg_result <- rma.mv(d_calc ~ sqrt(d_var_calc),  d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id, data=ma_data) # access zval and pval from here
reg_z <- round(reg_result$zval[2], digits = 2)
p_val <- reg_result$pval[2]
reg_p <- case_when(
p_val < 0.0001 ~ "< .0001",
TRUE ~ as.character(p_val))
#reg_result
ma_data_with_affirm <- ma_data %>%
mutate(pvalue =  2 * (1 - pnorm( abs(d_calc / sqrt(d_var_calc)))),
affirm =  (d_calc > 0) & (pvalue < 0.05))
affirm_model<- rma.mv(d_calc,  d_var_calc,
random = ~ 1 | short_cite/same_infant/x_1, data=
ma_data_with_affirm %>% filter(affirm == FALSE))
worst_case_estimate_print <- paste0(as.numeric(round(affirm_model$beta, 2)),
" [",
as.numeric(round(affirm_model$ci.lb, 2)),
", ",                                                                                                        as.numeric(round(affirm_model$ci.ub, 2)),
"]"
)
ma_data %>%
ggplot() +
geom_point(aes(x = mean_age, y = d_calc, size = n_1, color = sentence_structure),  alpha = .7) +
geom_smooth(method = "lm",aes(x = mean_age, y = d_calc, color = sentence_structure)) +
geom_hline(yintercept = 0, linetype = "dashed")+
ggtitle("Syntactic bootstrapping effect across development") +
xlab("Mean Age (months)") +
ylab(expression(paste("Effect Size (Cohen's ", italic(d), ")")))   +
guides(colour = FALSE, size = FALSE) +
theme_classic() +
theme(plot.title = element_text(size=25),
axis.title.x  = element_text(size=25),
axis.title.y = element_text(size=25),
axis.text.x  = element_text(size=25),
axis.text.y  = element_text(size=25),
legend.title = element_text(size=25),
legend.text=element_text(size=25),
legend.position = "bottom"
)
age_vocab_cor <- cor.test(ma_data$mean_age_months,ma_data$productive_vocab_median)
cor_p <- ifelse(round(age_vocab_cor$p.value, digits = 2)<0.0001, "<.0001", as.character(round(age_vocab_cor$p.value, digits = 2)))
theoretical_mod <- rma.mv(d_calc ~ sentence_structure + agent_argument_type + mean_age_months, V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
theoretical_mod_print <- generate_mega_model_df(theoretical_mod)
methodological_mod <- rma.mv(d_calc ~ character_identification + practice_phase + presentation_type + test_mass_or_distributed + n_repetitions_sentence,
V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
methodological_mod_print <- generate_mega_model_df(methodological_mod)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical") +
theme(legend.position = "none") +
ggtitle("Theoretical Moderators") +
plot_annotation(tag_levels = 'a')
p_model <- generate_predictor_plot(mod_print, methodological_mod_print, "methodological") +
ggtitle("Methodological Moderators") +
plot_annotation(tag_levels = 'a')
p_model_pane <- p_theoretical + p_model
p_model_pane
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
theoretical_mod <- rma.mv(d_calc ~ sentence_structure + agent_argument_type + mean_age_months, V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
theoretical_mod_print <- generate_mega_model_df(theoretical_mod)
methodological_mod <- rma.mv(d_calc ~ character_identification + practice_phase + presentation_type + test_mass_or_distributed + n_repetitions_sentence,
V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
methodological_mod_print <- generate_mega_model_df(methodological_mod)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical") +
theme(legend.position = "none") +
ggtitle("Theoretical Moderators") +
plot_annotation(tag_levels = 'a')
p_model <- generate_predictor_plot(mod_print, methodological_mod_print, "methodological") +
ggtitle("Methodological Moderators") +
plot_annotation(tag_levels = 'a')
p_model_pane <- p_theoretical + p_model
p_model_pane
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
theoretical_mod <- rma.mv(d_calc ~ sentence_structure + agent_argument_type + mean_age_months, V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
theoretical_mod_print <- generate_mega_model_df(theoretical_mod)
methodological_mod <- rma.mv(d_calc ~ character_identification + practice_phase + presentation_type + test_mass_or_distributed + n_repetitions_sentence,
V = d_var_calc,
random = ~ 1 | short_cite/same_infant/row_id,
method = "REML",
data = ma_data)
methodological_mod_print <- generate_mega_model_df(methodological_mod)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical") +
theme(legend.position = "none") +
ggtitle("Theoretical Moderators") +
plot_annotation(tag_levels = 'a')
p_model <- generate_predictor_plot(mod_print, methodological_mod_print, "methodological") +
ggtitle("Methodological Moderators") +
plot_annotation(tag_levels = 'a')
p_model_pane <- p_theoretical + p_model
p_model_pane
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical"
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical
source('~/Desktop/projects/SyntacticBootstrappingMA/writeups/paper/scripts/predictor_plot_helper.R', echo=TRUE)
p_theoretical <- generate_predictor_plot(mod_print, theoretical_mod_print, "theoretical")
p_theoretical
p_model <- generate_predictor_plot(mod_print, methodological_mod_print, "methodological")
p_model
